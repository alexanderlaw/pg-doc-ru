# Alexander Lakhin <a.lakhin@postgrespro.ru>, 2012, 2013, 2015, 2016.
# Pavel Luzanov <p.luzanov@postgrespro.ru>, 2015, 2016.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2016-08-19 11:32+0300\n"
"PO-Revision-Date: 2016-04-13 09:36+0300\n"
"Language-Team: Russian <pgsql-docs@lists.postgrespro.ru>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Lokalize 2.0\n"

#: event-trigger.xml:5(title)
msgid "Event Triggers"
msgstr "Триггеры событий"

#: event-trigger.xml:7(indexterm)
msgid "<primary>event trigger</primary>"
msgstr "<primary>событийный триггер</primary>"

#: event-trigger.xml:11(para)
msgid ""
"To supplement the trigger mechanism discussed in <xref linkend=\"triggers\"/"
">, <productname>PostgreSQL</productname> also provides event triggers. "
"Unlike regular triggers, which are attached to a single table and capture "
"only DML events, event triggers are global to a particular database and are "
"capable of capturing DDL events."
msgstr ""
"В дополнение к триггерам, рассмотренным в <xref remap=\"6\" linkend="
"\"triggers\"/>, <productname>PostgreSQL</productname> также предоставляет "
"триггеры событий. В отличие от обычных триггеров, которые подключаются к "
"конкретной таблице и работают только с командами DML, триггеры событий "
"определяются на уровне базы данных и работают с командами DDL."

#: event-trigger.xml:19(para)
msgid ""
"Like regular triggers, event triggers can be written in any procedural "
"language that includes event trigger support, or in C, but not in plain SQL."
msgstr ""
"Как и обычные триггеры, триггеры событий можно создавать на любом "
"процедурном языке, поддерживающим триггеры событий, а также на C, но не на "
"чистом SQL."

#: event-trigger.xml:26(title)
msgid "Overview of Event Trigger Behavior"
msgstr "Обзор механизма работы триггеров событий"

#: event-trigger.xml:28(para)
msgid ""
"An event trigger fires whenever the event with which it is associated occurs "
"in the database in which it is defined. Currently, the only supported events "
"are <literal>ddl_command_start</literal>, <literal>ddl_command_end</"
"literal>, <literal>table_rewrite</literal> and <literal>sql_drop</literal>. "
"Support for additional events may be added in future releases."
msgstr ""
"Триггер события срабатывает всякий раз, когда в базе данных, в которой он "
"определён, происходит связанное с ним событие. В настоящий момент "
"поддерживаются следующие события: <literal>ddl_command_start</literal>, "
"<literal>ddl_command_end</literal>, <literal>table_rewrite</literal> и "
"<literal>sql_drop</literal>. Поддержка дополнительных событий может быть "
"добавлена в будущих выпусках."

#: event-trigger.xml:39(para)
msgid ""
"The <literal>ddl_command_start</literal> event occurs just before the "
"execution of a <literal>CREATE</literal>, <literal>ALTER</literal>, "
"<literal>DROP</literal>, <literal>SECURITY LABEL</literal>, "
"<literal>COMMENT</literal>, <literal>GRANT</literal> or <literal>REVOKE</"
"literal> command. No check whether the affected object exists or doesn't "
"exist is performed before the event trigger fires. As an exception, however, "
"this event does not occur for DDL commands targeting shared objects &mdash; "
"databases, roles, and tablespaces &mdash; or for commands targeting event "
"triggers themselves. The event trigger mechanism does not support these "
"object types. <literal>ddl_command_start</literal> also occurs just before "
"the execution of a <literal>SELECT INTO</literal> command, since this is "
"equivalent to <literal>CREATE TABLE AS</literal>."
msgstr ""
"Событие <literal>ddl_command_start</literal> происходит непосредственно "
"перед выполнением команд <literal>CREATE</literal>, <literal>ALTER</"
"literal>, <literal>DROP</literal>, <literal>SECURITY LABEL</literal>, "
"<literal>COMMENT</literal>, <literal>GRANT</literal> и <literal>REVOKE</"
"literal>. Проверка на существование объекта перед срабатыванием триггера не "
"производится. В качестве исключения, однако, это событие не происходит для "
"команд DDL, обращающихся к общим объектам кластера базы данных &mdash; базам "
"данных, табличным пространствам, ролям, а также к самим триггерам событий. "
"Событие <literal>ddl_command_start</literal> также происходит "
"непосредственно перед выполнением команды <literal>SELECT INTO</literal>, "
"так как она равнозначна команде <literal>CREATE TABLE AS</literal>."

#: event-trigger.xml:55(para)
msgid ""
"The <literal>ddl_command_end</literal> event occurs just after the execution "
"of this same set of commands. To obtain more details on the <acronym>DDL</"
"acronym> operations that took place, use the set-returning function "
"<literal>pg_event_trigger_ddl_commands()</literal> from the "
"<literal>ddl_command_end</literal> event trigger code (see <xref linkend="
"\"functions-event-triggers\"/>). Note that the trigger fires after the "
"actions have taken place (but before the transaction commits), and thus the "
"system catalogs can be read as already changed."
msgstr ""
"Событие <literal>ddl_command_end</literal> происходит непосредственно после "
"выполнения команд из того же набора. Чтобы получить дополнительную "
"информацию об операциях <acronym>DDL</acronym>, повлекших произошедшее "
"событие, вызовите функцию <literal>pg_event_trigger_ddl_commands()</"
"literal>, возвращающую множество, из кода обработчика события "
"<literal>ddl_command_end</literal> (см. <xref remap=\"4\" linkend="
"\"functions-event-triggers\"/>). Заметьте, что этот триггер срабатывает "
"после того, как эти действия имели место (но до фиксации транзакции), так "
"что в системных каталогах можно увидеть уже изменённое состояние."

#: event-trigger.xml:66(para)
msgid ""
"The <literal>sql_drop</literal> event occurs just before the "
"<literal>ddl_command_end</literal> event trigger for any operation that "
"drops database objects. To list the objects that have been dropped, use the "
"set-returning function <literal>pg_event_trigger_dropped_objects()</literal> "
"from the <literal>sql_drop</literal> event trigger code (see <xref linkend="
"\"functions-event-triggers\"/>). Note that the trigger is executed after the "
"objects have been deleted from the system catalogs, so it's not possible to "
"look them up anymore."
msgstr ""
"Событие <literal>sql_drop</literal> происходит непосредственно перед "
"событием <literal>ddl_command_end</literal> для команд, которые удаляют "
"объекты базы данных. Для получения списка удалённых объектов используйте "
"возвращающую набор строк функцию "
"<literal>pg_event_trigger_dropped_objects()</literal> в триггере события "
"<literal>sql_drop</literal> (см. <xref remap=\"4\" linkend=\"functions-event-"
"triggers\"/>). Обратите внимание, что триггер выполняется после удаления "
"объектов из таблиц системного каталога, поэтому их невозможно больше увидеть."

#: event-trigger.xml:77(para)
msgid ""
"The <literal>table_rewrite</literal> event occurs just before a table is "
"rewritten by some actions of the commands <literal>ALTER TABLE</literal> and "
"<literal>ALTER TYPE</literal>. While other control statements are available "
"to rewrite a table, like <literal>CLUSTER</literal> and <literal>VACUUM</"
"literal>, the <literal>table_rewrite</literal> event is not triggered by "
"them."
msgstr ""
"Событие <literal>table_rewrite</literal> происходит только после того, как "
"таблица будет перезаписана в результате определённых действий команд "
"<literal>ALTER TABLE</literal> и <literal>ALTER TYPE</literal>. Хотя "
"перезапись таблицы может быть вызвана и другими управляющими операторами, в "
"частности <literal>CLUSTER</literal> и <literal>VACUUM</literal>, событие "
"<literal>table_rewrite</literal> для них не вызывается."

#: event-trigger.xml:86(para)
msgid ""
"Event triggers (like other functions) cannot be executed in an aborted "
"transaction. Thus, if a DDL command fails with an error, any associated "
"<literal>ddl_command_end</literal> triggers will not be executed. "
"Conversely, if a <literal>ddl_command_start</literal> trigger fails with an "
"error, no further event triggers will fire, and no attempt will be made to "
"execute the command itself. Similarly, if a <literal>ddl_command_end</"
"literal> trigger fails with an error, the effects of the DDL statement will "
"be rolled back, just as they would be in any other case where the containing "
"transaction aborts."
msgstr ""
"Триггеры событий (как и прочие функции) не могут выполняться в прерванной "
"транзакции. Поэтому, если команда DDL завершается ошибкой, соответствующие "
"триггеры <literal>ddl_command_end</literal> не сработают. И наоборот, если "
"триггер <literal>ddl_command_end</literal> завершился с ошибкой, последующие "
"триггеры событий не сработают, также как и сама команда не будет "
"выполняться. Похожим образом, если триггер <literal>ddl_command_end</"
"literal> завершится ошибкой, действие команды DDL будет отменено, также как "
"это происходит при возникновении ошибки внутри транзакции."

#: event-trigger.xml:98(para)
msgid ""
"For a complete list of commands supported by the event trigger mechanism, "
"see <xref linkend=\"event-trigger-matrix\"/>."
msgstr ""
"Полный список команд, которые поддерживаются триггерами событий, можно найти "
"в <xref remap=\"6\" linkend=\"event-trigger-matrix\"/>."

#: event-trigger.xml:103(para)
msgid ""
"Event triggers are created using the command <xref linkend=\"sql-"
"createeventtrigger\"/>. In order to create an event trigger, you must first "
"create a function with the special return type <literal>event_trigger</"
"literal>. This function need not (and may not) return a value; the return "
"type serves merely as a signal that the function is to be invoked as an "
"event trigger."
msgstr ""
"Для создания триггера события используется команда <xref linkend=\"sql-"
"createeventtrigger\"/>. Предварительно нужно создать функцию, со специальным "
"возвращаемым типом <literal>event_trigger</literal>. Данная функция не "
"обязана возвращать значение (и может не возвращать). Возвращаемый тип служит "
"лишь указанием на то, что функция будет вызываться из триггера события."

#: event-trigger.xml:111(para)
msgid ""
"If more than one event trigger is defined for a particular event, they will "
"fire in alphabetical order by trigger name."
msgstr ""
"Если есть несколько триггеров на одно и то же событие, то они будут "
"вызываться в алфавитном порядке по имени триггера."

#: event-trigger.xml:116(para)
msgid ""
"A trigger definition can also specify a <literal>WHEN</literal> condition so "
"that, for example, a <literal>ddl_command_start</literal> trigger can be "
"fired only for particular commands which the user wishes to intercept. A "
"common use of such triggers is to restrict the range of DDL operations which "
"users may perform."
msgstr ""
"В определении триггера можно использовать условие <literal>WHEN</literal>, "
"чтобы, например, триггер <literal>ddl_command_start</literal> срабатывал "
"только для отдельных команд, которые нужно перехватить. Триггеры событий "
"часто используются для ограничения диапазона DDL-команд, доступных "
"пользователям."

#: event-trigger.xml:126(title)
msgid "Event Trigger Firing Matrix"
msgstr "Матрица срабатывания триггеров событий"

#: event-trigger.xml:128(para)
msgid ""
"<xref linkend=\"event-trigger-by-command-tag\"/> lists all commands for "
"which event triggers are supported."
msgstr ""
"В <xref remap=\"6\" linkend=\"event-trigger-by-command-tag\"/> перечислены "
"команды, для которых поддерживаются триггеры событий."

#: event-trigger.xml:134(title)
msgid "Event Trigger Support by Command Tag"
msgstr "Поддержка триггеров событий командами DDL"

#: event-trigger.xml:138(entry)
msgid "Command Tag"
msgstr "Тег команды"

#: event-trigger.xml:139(literal)
msgid "ddl_command_start"
msgstr "ddl_command_start"

#: event-trigger.xml:140(literal)
msgid "ddl_command_end"
msgstr "ddl_command_end"

#: event-trigger.xml:141(literal)
msgid "sql_drop"
msgstr "sql_drop"

#: event-trigger.xml:142(literal)
msgid "table_rewrite"
msgstr "table_rewrite"

#: event-trigger.xml:143(entry)
msgid "Notes"
msgstr "Замечания"

#: event-trigger.xml:148(literal)
msgid "ALTER AGGREGATE"
msgstr "ALTER AGGREGATE"

#: event-trigger.xml:149(literal) event-trigger.xml:150(literal)
#: event-trigger.xml:157(literal) event-trigger.xml:158(literal)
#: event-trigger.xml:165(literal) event-trigger.xml:166(literal)
#: event-trigger.xml:173(literal) event-trigger.xml:174(literal)
#: event-trigger.xml:181(literal) event-trigger.xml:182(literal)
#: event-trigger.xml:189(literal) event-trigger.xml:190(literal)
#: event-trigger.xml:197(literal) event-trigger.xml:198(literal)
#: event-trigger.xml:199(literal) event-trigger.xml:205(literal)
#: event-trigger.xml:206(literal) event-trigger.xml:213(literal)
#: event-trigger.xml:214(literal) event-trigger.xml:221(literal)
#: event-trigger.xml:222(literal) event-trigger.xml:229(literal)
#: event-trigger.xml:230(literal) event-trigger.xml:237(literal)
#: event-trigger.xml:238(literal) event-trigger.xml:245(literal)
#: event-trigger.xml:246(literal) event-trigger.xml:253(literal)
#: event-trigger.xml:254(literal) event-trigger.xml:261(literal)
#: event-trigger.xml:262(literal) event-trigger.xml:269(literal)
#: event-trigger.xml:270(literal) event-trigger.xml:277(literal)
#: event-trigger.xml:278(literal) event-trigger.xml:279(literal)
#: event-trigger.xml:280(literal) event-trigger.xml:285(literal)
#: event-trigger.xml:286(literal) event-trigger.xml:293(literal)
#: event-trigger.xml:294(literal) event-trigger.xml:301(literal)
#: event-trigger.xml:302(literal) event-trigger.xml:309(literal)
#: event-trigger.xml:310(literal) event-trigger.xml:317(literal)
#: event-trigger.xml:318(literal) event-trigger.xml:325(literal)
#: event-trigger.xml:326(literal) event-trigger.xml:328(literal)
#: event-trigger.xml:333(literal) event-trigger.xml:334(literal)
#: event-trigger.xml:341(literal) event-trigger.xml:342(literal)
#: event-trigger.xml:349(literal) event-trigger.xml:350(literal)
#: event-trigger.xml:357(literal) event-trigger.xml:358(literal)
#: event-trigger.xml:365(literal) event-trigger.xml:366(literal)
#: event-trigger.xml:373(literal) event-trigger.xml:374(literal)
#: event-trigger.xml:381(literal) event-trigger.xml:382(literal)
#: event-trigger.xml:389(literal) event-trigger.xml:390(literal)
#: event-trigger.xml:397(literal) event-trigger.xml:398(literal)
#: event-trigger.xml:405(literal) event-trigger.xml:406(literal)
#: event-trigger.xml:413(literal) event-trigger.xml:414(literal)
#: event-trigger.xml:421(literal) event-trigger.xml:422(literal)
#: event-trigger.xml:429(literal) event-trigger.xml:430(literal)
#: event-trigger.xml:437(literal) event-trigger.xml:438(literal)
#: event-trigger.xml:445(literal) event-trigger.xml:446(literal)
#: event-trigger.xml:453(literal) event-trigger.xml:454(literal)
#: event-trigger.xml:461(literal) event-trigger.xml:462(literal)
#: event-trigger.xml:469(literal) event-trigger.xml:470(literal)
#: event-trigger.xml:477(literal) event-trigger.xml:478(literal)
#: event-trigger.xml:485(literal) event-trigger.xml:486(literal)
#: event-trigger.xml:493(literal) event-trigger.xml:494(literal)
#: event-trigger.xml:501(literal) event-trigger.xml:502(literal)
#: event-trigger.xml:509(literal) event-trigger.xml:510(literal)
#: event-trigger.xml:517(literal) event-trigger.xml:518(literal)
#: event-trigger.xml:525(literal) event-trigger.xml:526(literal)
#: event-trigger.xml:533(literal) event-trigger.xml:534(literal)
#: event-trigger.xml:541(literal) event-trigger.xml:542(literal)
#: event-trigger.xml:549(literal) event-trigger.xml:550(literal)
#: event-trigger.xml:557(literal) event-trigger.xml:558(literal)
#: event-trigger.xml:565(literal) event-trigger.xml:566(literal)
#: event-trigger.xml:572(literal) event-trigger.xml:573(literal)
#: event-trigger.xml:580(literal) event-trigger.xml:581(literal)
#: event-trigger.xml:588(literal) event-trigger.xml:589(literal)
#: event-trigger.xml:590(literal) event-trigger.xml:596(literal)
#: event-trigger.xml:597(literal) event-trigger.xml:598(literal)
#: event-trigger.xml:604(literal) event-trigger.xml:605(literal)
#: event-trigger.xml:606(literal) event-trigger.xml:612(literal)
#: event-trigger.xml:613(literal) event-trigger.xml:614(literal)
#: event-trigger.xml:620(literal) event-trigger.xml:621(literal)
#: event-trigger.xml:622(literal) event-trigger.xml:628(literal)
#: event-trigger.xml:629(literal) event-trigger.xml:630(literal)
#: event-trigger.xml:636(literal) event-trigger.xml:637(literal)
#: event-trigger.xml:638(literal) event-trigger.xml:644(literal)
#: event-trigger.xml:645(literal) event-trigger.xml:646(literal)
#: event-trigger.xml:652(literal) event-trigger.xml:653(literal)
#: event-trigger.xml:654(literal) event-trigger.xml:660(literal)
#: event-trigger.xml:661(literal) event-trigger.xml:662(literal)
#: event-trigger.xml:668(literal) event-trigger.xml:669(literal)
#: event-trigger.xml:670(literal) event-trigger.xml:676(literal)
#: event-trigger.xml:677(literal) event-trigger.xml:678(literal)
#: event-trigger.xml:684(literal) event-trigger.xml:685(literal)
#: event-trigger.xml:686(literal) event-trigger.xml:692(literal)
#: event-trigger.xml:693(literal) event-trigger.xml:694(literal)
#: event-trigger.xml:700(literal) event-trigger.xml:701(literal)
#: event-trigger.xml:702(literal) event-trigger.xml:708(literal)
#: event-trigger.xml:709(literal) event-trigger.xml:710(literal)
#: event-trigger.xml:716(literal) event-trigger.xml:717(literal)
#: event-trigger.xml:718(literal) event-trigger.xml:724(literal)
#: event-trigger.xml:725(literal) event-trigger.xml:726(literal)
#: event-trigger.xml:732(literal) event-trigger.xml:733(literal)
#: event-trigger.xml:734(literal) event-trigger.xml:740(literal)
#: event-trigger.xml:741(literal) event-trigger.xml:742(literal)
#: event-trigger.xml:748(literal) event-trigger.xml:749(literal)
#: event-trigger.xml:750(literal) event-trigger.xml:756(literal)
#: event-trigger.xml:757(literal) event-trigger.xml:758(literal)
#: event-trigger.xml:764(literal) event-trigger.xml:765(literal)
#: event-trigger.xml:766(literal) event-trigger.xml:772(literal)
#: event-trigger.xml:773(literal) event-trigger.xml:774(literal)
#: event-trigger.xml:780(literal) event-trigger.xml:781(literal)
#: event-trigger.xml:782(literal) event-trigger.xml:788(literal)
#: event-trigger.xml:789(literal) event-trigger.xml:790(literal)
#: event-trigger.xml:796(literal) event-trigger.xml:797(literal)
#: event-trigger.xml:798(literal) event-trigger.xml:804(literal)
#: event-trigger.xml:805(literal) event-trigger.xml:806(literal)
#: event-trigger.xml:812(literal) event-trigger.xml:813(literal)
#: event-trigger.xml:814(literal) event-trigger.xml:820(literal)
#: event-trigger.xml:821(literal) event-trigger.xml:828(literal)
#: event-trigger.xml:829(literal) event-trigger.xml:836(literal)
#: event-trigger.xml:837(literal) event-trigger.xml:844(literal)
#: event-trigger.xml:845(literal) event-trigger.xml:852(literal)
#: event-trigger.xml:853(literal)
msgid "X"
msgstr "X"

#: event-trigger.xml:151(literal) event-trigger.xml:152(literal)
#: event-trigger.xml:159(literal) event-trigger.xml:160(literal)
#: event-trigger.xml:167(literal) event-trigger.xml:168(literal)
#: event-trigger.xml:175(literal) event-trigger.xml:176(literal)
#: event-trigger.xml:183(literal) event-trigger.xml:184(literal)
#: event-trigger.xml:191(literal) event-trigger.xml:192(literal)
#: event-trigger.xml:200(literal) event-trigger.xml:207(literal)
#: event-trigger.xml:208(literal) event-trigger.xml:215(literal)
#: event-trigger.xml:216(literal) event-trigger.xml:223(literal)
#: event-trigger.xml:224(literal) event-trigger.xml:231(literal)
#: event-trigger.xml:232(literal) event-trigger.xml:239(literal)
#: event-trigger.xml:240(literal) event-trigger.xml:247(literal)
#: event-trigger.xml:248(literal) event-trigger.xml:255(literal)
#: event-trigger.xml:256(literal) event-trigger.xml:263(literal)
#: event-trigger.xml:264(literal) event-trigger.xml:271(literal)
#: event-trigger.xml:272(literal) event-trigger.xml:287(literal)
#: event-trigger.xml:288(literal) event-trigger.xml:295(literal)
#: event-trigger.xml:296(literal) event-trigger.xml:303(literal)
#: event-trigger.xml:304(literal) event-trigger.xml:311(literal)
#: event-trigger.xml:312(literal) event-trigger.xml:319(literal)
#: event-trigger.xml:320(literal) event-trigger.xml:327(literal)
#: event-trigger.xml:335(literal) event-trigger.xml:336(literal)
#: event-trigger.xml:343(literal) event-trigger.xml:344(literal)
#: event-trigger.xml:351(literal) event-trigger.xml:352(literal)
#: event-trigger.xml:359(literal) event-trigger.xml:360(literal)
#: event-trigger.xml:367(literal) event-trigger.xml:368(literal)
#: event-trigger.xml:375(literal) event-trigger.xml:376(literal)
#: event-trigger.xml:383(literal) event-trigger.xml:384(literal)
#: event-trigger.xml:391(literal) event-trigger.xml:392(literal)
#: event-trigger.xml:399(literal) event-trigger.xml:400(literal)
#: event-trigger.xml:407(literal) event-trigger.xml:408(literal)
#: event-trigger.xml:415(literal) event-trigger.xml:416(literal)
#: event-trigger.xml:423(literal) event-trigger.xml:424(literal)
#: event-trigger.xml:431(literal) event-trigger.xml:432(literal)
#: event-trigger.xml:439(literal) event-trigger.xml:440(literal)
#: event-trigger.xml:447(literal) event-trigger.xml:448(literal)
#: event-trigger.xml:455(literal) event-trigger.xml:456(literal)
#: event-trigger.xml:463(literal) event-trigger.xml:464(literal)
#: event-trigger.xml:471(literal) event-trigger.xml:472(literal)
#: event-trigger.xml:479(literal) event-trigger.xml:480(literal)
#: event-trigger.xml:487(literal) event-trigger.xml:488(literal)
#: event-trigger.xml:495(literal) event-trigger.xml:496(literal)
#: event-trigger.xml:503(literal) event-trigger.xml:504(literal)
#: event-trigger.xml:511(literal) event-trigger.xml:512(literal)
#: event-trigger.xml:519(literal) event-trigger.xml:520(literal)
#: event-trigger.xml:527(literal) event-trigger.xml:528(literal)
#: event-trigger.xml:535(literal) event-trigger.xml:536(literal)
#: event-trigger.xml:543(literal) event-trigger.xml:544(literal)
#: event-trigger.xml:551(literal) event-trigger.xml:552(literal)
#: event-trigger.xml:559(literal) event-trigger.xml:560(literal)
#: event-trigger.xml:567(literal) event-trigger.xml:568(literal)
#: event-trigger.xml:574(literal) event-trigger.xml:575(literal)
#: event-trigger.xml:582(literal) event-trigger.xml:583(literal)
#: event-trigger.xml:591(literal) event-trigger.xml:599(literal)
#: event-trigger.xml:607(literal) event-trigger.xml:615(literal)
#: event-trigger.xml:623(literal) event-trigger.xml:631(literal)
#: event-trigger.xml:639(literal) event-trigger.xml:647(literal)
#: event-trigger.xml:655(literal) event-trigger.xml:663(literal)
#: event-trigger.xml:671(literal) event-trigger.xml:679(literal)
#: event-trigger.xml:687(literal) event-trigger.xml:695(literal)
#: event-trigger.xml:703(literal) event-trigger.xml:711(literal)
#: event-trigger.xml:719(literal) event-trigger.xml:727(literal)
#: event-trigger.xml:735(literal) event-trigger.xml:743(literal)
#: event-trigger.xml:751(literal) event-trigger.xml:759(literal)
#: event-trigger.xml:767(literal) event-trigger.xml:775(literal)
#: event-trigger.xml:783(literal) event-trigger.xml:791(literal)
#: event-trigger.xml:799(literal) event-trigger.xml:807(literal)
#: event-trigger.xml:815(literal) event-trigger.xml:822(literal)
#: event-trigger.xml:823(literal) event-trigger.xml:830(literal)
#: event-trigger.xml:831(literal) event-trigger.xml:838(literal)
#: event-trigger.xml:839(literal) event-trigger.xml:846(literal)
#: event-trigger.xml:847(literal) event-trigger.xml:854(literal)
#: event-trigger.xml:855(literal)
msgid "-"
msgstr "-"

#: event-trigger.xml:156(literal)
msgid "ALTER COLLATION"
msgstr "ALTER COLLATION"

#: event-trigger.xml:164(literal)
msgid "ALTER CONVERSION"
msgstr "ALTER CONVERSION"

#: event-trigger.xml:172(literal)
msgid "ALTER DOMAIN"
msgstr "ALTER DOMAIN"

#: event-trigger.xml:180(literal)
msgid "ALTER EXTENSION"
msgstr "ALTER EXTENSION"

#: event-trigger.xml:188(literal)
msgid "ALTER FOREIGN DATA WRAPPER"
msgstr "ALTER FOREIGN DATA WRAPPER"

#: event-trigger.xml:196(literal)
msgid "ALTER FOREIGN TABLE"
msgstr "ALTER FOREIGN TABLE"

#: event-trigger.xml:204(literal)
msgid "ALTER FUNCTION"
msgstr "ALTER FUNCTION"

#: event-trigger.xml:212(literal)
msgid "ALTER LANGUAGE"
msgstr "ALTER LANGUAGE"

#: event-trigger.xml:220(literal)
msgid "ALTER OPERATOR"
msgstr "ALTER OPERATOR"

#: event-trigger.xml:228(literal)
msgid "ALTER OPERATOR CLASS"
msgstr "ALTER OPERATOR CLASS"

#: event-trigger.xml:236(literal)
msgid "ALTER OPERATOR FAMILY"
msgstr "ALTER OPERATOR FAMILY"

#: event-trigger.xml:244(literal)
msgid "ALTER POLICY"
msgstr "ALTER POLICY"

#: event-trigger.xml:252(literal)
msgid "ALTER SCHEMA"
msgstr "ALTER SCHEMA"

#: event-trigger.xml:260(literal)
msgid "ALTER SEQUENCE"
msgstr "ALTER SEQUENCE"

#: event-trigger.xml:268(literal)
msgid "ALTER SERVER"
msgstr "ALTER SERVER"

#: event-trigger.xml:276(literal)
msgid "ALTER TABLE"
msgstr "ALTER TABLE"

#: event-trigger.xml:284(literal)
msgid "ALTER TEXT SEARCH CONFIGURATION"
msgstr "ALTER TEXT SEARCH CONFIGURATION"

#: event-trigger.xml:292(literal)
msgid "ALTER TEXT SEARCH DICTIONARY"
msgstr "ALTER TEXT SEARCH DICTIONARY"

#: event-trigger.xml:300(literal)
msgid "ALTER TEXT SEARCH PARSER"
msgstr "ALTER TEXT SEARCH PARSER"

#: event-trigger.xml:308(literal)
msgid "ALTER TEXT SEARCH TEMPLATE"
msgstr "ALTER TEXT SEARCH TEMPLATE"

#: event-trigger.xml:316(literal)
msgid "ALTER TRIGGER"
msgstr "ALTER TRIGGER"

#: event-trigger.xml:324(literal)
msgid "ALTER TYPE"
msgstr "ALTER TYPE"

#: event-trigger.xml:332(literal)
msgid "ALTER USER MAPPING"
msgstr "ALTER USER MAPPING"

#: event-trigger.xml:340(literal)
msgid "ALTER VIEW"
msgstr "ALTER VIEW"

#: event-trigger.xml:348(literal)
msgid "CREATE AGGREGATE"
msgstr "CREATE AGGREGATE"

#: event-trigger.xml:356(literal)
msgid "COMMENT"
msgstr "COMMENT"

#: event-trigger.xml:361(entry) event-trigger.xml:824(entry)
#: event-trigger.xml:840(entry) event-trigger.xml:848(entry)
msgid "Only for local objects"
msgstr "Только для локальных объектов"

#: event-trigger.xml:364(literal)
msgid "CREATE CAST"
msgstr "CREATE CAST"

#: event-trigger.xml:372(literal)
msgid "CREATE COLLATION"
msgstr "CREATE COLLATION"

#: event-trigger.xml:380(literal)
msgid "CREATE CONVERSION"
msgstr "CREATE CONVERSION"

#: event-trigger.xml:388(literal)
msgid "CREATE DOMAIN"
msgstr "CREATE DOMAIN"

#: event-trigger.xml:396(literal)
msgid "CREATE EXTENSION"
msgstr "CREATE EXTENSION"

#: event-trigger.xml:404(literal)
msgid "CREATE FOREIGN DATA WRAPPER"
msgstr "CREATE FOREIGN DATA WRAPPER"

#: event-trigger.xml:412(literal)
msgid "CREATE FOREIGN TABLE"
msgstr "CREATE FOREIGN TABLE"

#: event-trigger.xml:420(literal)
msgid "CREATE FUNCTION"
msgstr "CREATE FUNCTION"

#: event-trigger.xml:428(literal)
msgid "CREATE INDEX"
msgstr "CREATE INDEX"

#: event-trigger.xml:436(literal)
msgid "CREATE LANGUAGE"
msgstr "CREATE LANGUAGE"

#: event-trigger.xml:444(literal)
msgid "CREATE OPERATOR"
msgstr "CREATE OPERATOR"

#: event-trigger.xml:452(literal)
msgid "CREATE OPERATOR CLASS"
msgstr "CREATE OPERATOR CLASS"

#: event-trigger.xml:460(literal)
msgid "CREATE OPERATOR FAMILY"
msgstr "CREATE OPERATOR FAMILY"

#: event-trigger.xml:468(literal)
msgid "CREATE POLICY"
msgstr "CREATE POLICY"

#: event-trigger.xml:476(literal)
msgid "CREATE RULE"
msgstr "CREATE RULE"

#: event-trigger.xml:484(literal)
msgid "CREATE SCHEMA"
msgstr "CREATE SCHEMA"

#: event-trigger.xml:492(literal)
msgid "CREATE SEQUENCE"
msgstr "CREATE SEQUENCE"

#: event-trigger.xml:500(literal)
msgid "CREATE SERVER"
msgstr "CREATE SERVER"

#: event-trigger.xml:508(literal)
msgid "CREATE TABLE"
msgstr "CREATE TABLE"

#: event-trigger.xml:516(literal)
msgid "CREATE TABLE AS"
msgstr "CREATE TABLE AS"

#: event-trigger.xml:524(literal)
msgid "CREATE TEXT SEARCH CONFIGURATION"
msgstr "CREATE TEXT SEARCH CONFIGURATION"

#: event-trigger.xml:532(literal)
msgid "CREATE TEXT SEARCH DICTIONARY"
msgstr "CREATE TEXT SEARCH DICTIONARY"

#: event-trigger.xml:540(literal)
msgid "CREATE TEXT SEARCH PARSER"
msgstr "CREATE TEXT SEARCH PARSER"

#: event-trigger.xml:548(literal)
msgid "CREATE TEXT SEARCH TEMPLATE"
msgstr "CREATE TEXT SEARCH TEMPLATE"

#: event-trigger.xml:556(literal)
msgid "CREATE TRIGGER"
msgstr "CREATE TRIGGER"

#: event-trigger.xml:564(literal)
msgid "CREATE TYPE"
msgstr "CREATE TYPE"

#: event-trigger.xml:571(literal)
msgid "CREATE USER MAPPING"
msgstr "CREATE USER MAPPING"

#: event-trigger.xml:579(literal)
msgid "CREATE VIEW"
msgstr "CREATE VIEW"

#: event-trigger.xml:587(literal)
msgid "DROP AGGREGATE"
msgstr "DROP AGGREGATE"

#: event-trigger.xml:595(literal)
msgid "DROP CAST"
msgstr "DROP CAST"

#: event-trigger.xml:603(literal)
msgid "DROP COLLATION"
msgstr "DROP COLLATION"

#: event-trigger.xml:611(literal)
msgid "DROP CONVERSION"
msgstr "DROP CONVERSION"

#: event-trigger.xml:619(literal)
msgid "DROP DOMAIN"
msgstr "DROP DOMAIN"

#: event-trigger.xml:627(literal)
msgid "DROP EXTENSION"
msgstr "DROP EXTENSION"

#: event-trigger.xml:635(literal)
msgid "DROP FOREIGN DATA WRAPPER"
msgstr "DROP FOREIGN DATA WRAPPER"

#: event-trigger.xml:643(literal)
msgid "DROP FOREIGN TABLE"
msgstr "DROP FOREIGN TABLE"

#: event-trigger.xml:651(literal)
msgid "DROP FUNCTION"
msgstr "DROP FUNCTION"

#: event-trigger.xml:659(literal)
msgid "DROP INDEX"
msgstr "DROP INDEX"

#: event-trigger.xml:667(literal)
msgid "DROP LANGUAGE"
msgstr "DROP LANGUAGE"

#: event-trigger.xml:675(literal)
msgid "DROP OPERATOR"
msgstr "DROP OPERATOR"

#: event-trigger.xml:683(literal)
msgid "DROP OPERATOR CLASS"
msgstr "DROP OPERATOR CLASS"

#: event-trigger.xml:691(literal)
msgid "DROP OPERATOR FAMILY"
msgstr "DROP OPERATOR FAMILY"

#: event-trigger.xml:699(literal)
msgid "DROP OWNED"
msgstr "DROP OWNED"

#: event-trigger.xml:707(literal)
msgid "DROP POLICY"
msgstr "DROP POLICY"

#: event-trigger.xml:715(literal)
msgid "DROP RULE"
msgstr "DROP RULE"

#: event-trigger.xml:723(literal)
msgid "DROP SCHEMA"
msgstr "DROP SCHEMA"

#: event-trigger.xml:731(literal)
msgid "DROP SEQUENCE"
msgstr "DROP SEQUENCE"

#: event-trigger.xml:739(literal)
msgid "DROP SERVER"
msgstr "DROP SERVER"

#: event-trigger.xml:747(literal)
msgid "DROP TABLE"
msgstr "DROP TABLE"

#: event-trigger.xml:755(literal)
msgid "DROP TEXT SEARCH CONFIGURATION"
msgstr "DROP TEXT SEARCH CONFIGURATION"

#: event-trigger.xml:763(literal)
msgid "DROP TEXT SEARCH DICTIONARY"
msgstr "DROP TEXT SEARCH DICTIONARY"

#: event-trigger.xml:771(literal)
msgid "DROP TEXT SEARCH PARSER"
msgstr "DROP TEXT SEARCH PARSER"

#: event-trigger.xml:779(literal)
msgid "DROP TEXT SEARCH TEMPLATE"
msgstr "DROP TEXT SEARCH TEMPLATE"

#: event-trigger.xml:787(literal)
msgid "DROP TRIGGER"
msgstr "DROP TRIGGER"

#: event-trigger.xml:795(literal)
msgid "DROP TYPE"
msgstr "DROP TYPE"

#: event-trigger.xml:803(literal)
msgid "DROP USER MAPPING"
msgstr "DROP USER MAPPING"

#: event-trigger.xml:811(literal)
msgid "DROP VIEW"
msgstr "DROP VIEW"

#: event-trigger.xml:819(literal)
msgid "GRANT"
msgstr "GRANT"

#: event-trigger.xml:827(literal)
msgid "IMPORT FOREIGN SCHEMA"
msgstr "IMPORT FOREIGN SCHEMA"

#: event-trigger.xml:835(literal)
msgid "REVOKE"
msgstr "REVOKE"

#: event-trigger.xml:843(literal)
msgid "SECURITY LABEL"
msgstr "SECURITY LABEL"

#: event-trigger.xml:851(literal)
msgid "SELECT INTO"
msgstr "SELECT INTO"

#: event-trigger.xml:864(title)
msgid "Writing Event Trigger Functions in C"
msgstr "Триггерные функции событий на языке C"

#: event-trigger.xml:866(indexterm)
msgid "<primary>event trigger</primary> <secondary>in C</secondary>"
msgstr "<primary>событийный триггер</primary> <secondary>на C</secondary>"

#: event-trigger.xml:871(para)
msgid ""
"This section describes the low-level details of the interface to an event "
"trigger function. This information is only needed when writing event trigger "
"functions in C. If you are using a higher-level language then these details "
"are handled for you. In most cases you should consider using a procedural "
"language before writing your event triggers in C. The documentation of each "
"procedural language explains how to write an event trigger in that language."
msgstr ""
"Этот раздел описывает низкоуровневые детали интерфейса для триггерной "
"функции. Эта информация необходима только при разработке триггерных функций "
"событий на языке C. При использовании языка более высокого уровня, эти "
"детали обрабатываются автоматически. В большинстве случаев необходимо "
"рассмотреть использование процедурного языка прежде чем начать разрабатывать "
"триггеры событий на C. В документации по каждому процедурному языку "
"объясняется как создавать триггеры событий на этом языке."

#: event-trigger.xml:881(para)
msgid ""
"Event trigger functions must use the <quote>version 1</quote> function "
"manager interface."
msgstr ""
"Триггерные функции событий должны использовать <quote>version 1</quote> "
"интерфейса диспетчера функций."

#: event-trigger.xml:892(programlisting)
#, no-wrap
msgid "CALLED_AS_EVENT_TRIGGER(fcinfo)"
msgstr "CALLED_AS_EVENT_TRIGGER(fcinfo)"

#: event-trigger.xml:896(programlisting)
#, no-wrap
msgid "((fcinfo)-&gt;context != NULL &amp;&amp; IsA((fcinfo)-&gt;context, EventTriggerData))"
msgstr "<structname>EventTriggerData</structname>"

#: event-trigger.xml:886(para)
msgid ""
"When a function is called by the event trigger manager, it is not passed any "
"normal arguments, but it is passed a <quote>context</quote> pointer pointing "
"to a <structname>EventTriggerData</structname> structure. C functions can "
"check whether they were called from the event trigger manager or not by "
"executing the macro: <placeholder-1/> which expands to: <placeholder-2/> If "
"this returns true, then it is safe to cast <literal>fcinfo-&gt;context</"
"literal> to type <literal>EventTriggerData *</literal> and make use of the "
"pointed-to <structname>EventTriggerData</structname> structure. The function "
"must <emphasis>not</emphasis> alter the <structname>EventTriggerData</"
"structname> structure or any of the data it points to."
msgstr ""
"Когда функция вызывается диспетчером триггеров событий, ей не передаются "
"обычные аргументы, но передаётся указатель <quote>context</quote>, "
"ссылающийся на структуру <structname>EventTriggerData</structname>. Функции "
"на C могут проверить вызваны ли они диспетчером триггеров событий или нет "
"выполнив макрос: <placeholder-1/> который разворачивается в: <placeholder-2/"
"> Если возвращается истина, то <literal>fcinfo-&gt;context</literal> можно "
"безопасно привести к типу <literal>EventTriggerData *</literal> и "
"использовать указатель на структуру <structname>EventTriggerData</"
"structname>. Функция <emphasis>не</emphasis> должна изменять структуру "
"<structname>EventTriggerData</structname> или любые данные, которые на неё "
"указывают."

#: event-trigger.xml:911(programlisting)
#, no-wrap
msgid ""
"typedef struct EventTriggerData\n"
"{\n"
"    NodeTag     type;\n"
"    const char *event;      /* event name */\n"
"    Node       *parsetree;  /* parse tree */\n"
"    const char *tag;        /* command tag */\n"
"} EventTriggerData;"
msgstr ""
"typedef struct EventTriggerData\n"
"{\n"
"    NodeTag     type;\n"
"    const char *event;      /* имя события */\n"
"    Node       *parsetree;  /* дерево разбора */\n"
"    const char *tag;        /* тег команды */\n"
"} EventTriggerData;"

#: event-trigger.xml:925(structfield)
msgid "type"
msgstr "type"

#: event-trigger.xml:927(para)
msgid "Always <literal>T_EventTriggerData</literal>."
msgstr "Всегда <literal>T_EventTriggerData</literal>."

#: event-trigger.xml:934(structfield)
msgid "event"
msgstr "event"

#: event-trigger.xml:936(para)
msgid ""
"Describes the event for which the function is called, one of <literal>"
"\"ddl_command_start\"</literal>, <literal>\"ddl_command_end\"</literal>, "
"<literal>\"sql_drop\"</literal>, <literal>\"table_rewrite\"</literal>. See "
"<xref linkend=\"event-trigger-definition\"/> for the meaning of these events."
msgstr ""
"Описывает событие, для которого вызывается функция. Возможные значения: "
"<literal>\"ddl_command_start\"</literal>, <literal>\"ddl_command_end\"</"
"literal>, <literal>\"sql_drop\"</literal>, <literal>\"table_rewrite\"</"
"literal>. Суть этих событий описывается в <xref remap=\"6\" linkend=\"event-"
"trigger-definition\"/>."

#: event-trigger.xml:947(structfield)
msgid "parsetree"
msgstr "parsetree"

#: event-trigger.xml:949(para)
msgid ""
"A pointer to the parse tree of the command. Check the PostgreSQL source code "
"for details. The parse tree structure is subject to change without notice."
msgstr ""
"Указатель на дерево разбора команды. Детали можно посмотреть в исходном коде "
"PostgreSQL. Структура дерева разбора может быть изменена без предупреждений."

#: event-trigger.xml:958(structfield)
msgid "tag"
msgstr "tag"

#: event-trigger.xml:960(para)
msgid ""
"The command tag associated with the event for which the event trigger is "
"run, for example <literal>\"CREATE FUNCTION\"</literal>."
msgstr ""
"Тег команды, для которой сработал триггер события. Например <literal>"
"\"CREATE FUNCTION\"</literal>."

#: event-trigger.xml:907(para)
msgid ""
"<structname>struct EventTriggerData</structname> is defined in "
"<filename>commands/event_trigger.h</filename>: <placeholder-1/> where the "
"members are defined as follows: <placeholder-2/>"
msgstr ""
"<structname>struct EventTriggerData</structname> определена в "
"<filename>commands/event_trigger.h</filename>: <placeholder-1/> со "
"следующими членами структуры: <placeholder-2/>"

#: event-trigger.xml:969(para)
msgid ""
"An event trigger function must return a <symbol>NULL</symbol> pointer "
"(<emphasis>not</emphasis> an SQL null value, that is, do not set "
"<parameter>isNull</parameter> true)."
msgstr ""
"Функция триггера события должна возвращать указатель <symbol>NULL</symbol> "
"(но <emphasis>не</emphasis> SQL значение null, то есть не нужно "
"устанавливать <parameter>isNull</parameter> в истину)."

#: event-trigger.xml:977(title)
msgid "A Complete Event Trigger Example"
msgstr "Полный пример триггера события"

#: event-trigger.xml:979(para)
msgid ""
"Here is a very simple example of an event trigger function written in C. "
"(Examples of triggers written in procedural languages can be found in the "
"documentation of the procedural languages.)"
msgstr ""
"Вот очень простой пример функции для триггера события, написанной на C. "
"(Примеры триггеров для процедурных языков могут быть найдены в документации "
"на процедурные языки.)"

#: event-trigger.xml:985(para)
msgid ""
"The function <function>noddl</function> raises an exception each time it is "
"called. The event trigger definition associated the function with the "
"<literal>ddl_command_start</literal> event. The effect is that all DDL "
"commands (with the exceptions mentioned in <xref linkend=\"event-trigger-"
"definition\"/>) are prevented from running."
msgstr ""
"Функция <function>noddl</function> выдаёт ошибку при каждом вызове. Триггер "
"с этой функцией определяется для события <literal>ddl_command_start</"
"literal>. Это предотвращает работу любых DDL-команд (за исключением тех, о "
"которых говорилось в <xref remap=\"6\" linkend=\"event-trigger-definition\"/"
">)."

#: event-trigger.xml:993(para)
msgid "This is the source code of the trigger function: <placeholder-1/>"
msgstr "Теперь исходный код триггерной функции: <placeholder-1/>"

#: event-trigger.xml:1026(programlisting)
#, no-wrap
msgid ""
"CREATE FUNCTION noddl() RETURNS event_trigger\n"
"    AS 'noddl' LANGUAGE C;\n"
"\n"
"CREATE EVENT TRIGGER noddl ON ddl_command_start\n"
"    EXECUTE PROCEDURE noddl();"
msgstr ""
"CREATE FUNCTION noddl() RETURNS event_trigger\n"
"    AS 'noddl' LANGUAGE C;\n"
"\n"
"CREATE EVENT TRIGGER noddl ON ddl_command_start\n"
"    EXECUTE PROCEDURE noddl();"

#: event-trigger.xml:1023(para)
msgid ""
"After you have compiled the source code (see <xref linkend=\"dfunc\"/>), "
"declare the function and the triggers: <placeholder-1/>"
msgstr ""
"После компиляции исходного кода (см. <xref remap=\"4\" linkend=\"dfunc\"/>) "
"объявляем функцию и триггеры: <placeholder-1/>"

#: event-trigger.xml:1035(para)
msgid ""
"Now you can test the operation of the trigger: <screen>\n"
"=# \\dy\n"
"                     List of event triggers\n"
" Name  |       Event       | Owner | Enabled | Procedure | Tags\n"
"-------+-------------------+-------+---------+-----------+------\n"
" noddl | ddl_command_start | dim   | enabled | noddl     |\n"
"(1 row)\n"
"\n"
"=# CREATE TABLE foo(id serial);\n"
"ERROR:  command \"CREATE TABLE\" denied\n"
"</screen>"
msgstr ""
"Теперь проверим работу триггера: <screen>\n"
"=# \\dy\n"
"                     List of event triggers\n"
" Name  |       Event       | Owner | Enabled | Procedure | Tags\n"
"-------+-------------------+-------+---------+-----------+------\n"
" noddl | ddl_command_start | dim   | enabled | noddl     |\n"
"(1 row)\n"
"\n"
"=# CREATE TABLE foo(id serial);\n"
"ERROR:  Команда \"CREATE TABLE\" отменена\n"
"</screen>"

#: event-trigger.xml:1055(programlisting)
#, no-wrap
msgid ""
"BEGIN;\n"
"ALTER EVENT TRIGGER noddl DISABLE;\n"
"CREATE TABLE foo (id serial);\n"
"ALTER EVENT TRIGGER noddl ENABLE;\n"
"COMMIT;"
msgstr ""
"BEGIN;\n"
"ALTER EVENT TRIGGER noddl DISABLE;\n"
"CREATE TABLE foo (id serial);\n"
"ALTER EVENT TRIGGER noddl ENABLE;\n"
"COMMIT;"

#: event-trigger.xml:1050(para)
msgid ""
"In this situation, in order to be able to run some DDL commands when you "
"need to do so, you have to either drop the event trigger or disable it. It "
"can be convenient to disable the trigger for only the duration of a "
"transaction: <placeholder-1/> (Recall that DDL commands on event triggers "
"themselves are not affected by event triggers.)"
msgstr ""
"В этой ситуации, для запуска DDL-команд, нужно либо удалить триггер события, "
"либо отключить его. Может быть удобным отключить триггер на время выполнения "
"транзакции: <placeholder-1/> (Вспомним, что триггеры событий не обрабатывают "
"DDL-команды для самих триггеров событий.)"

#: event-trigger.xml:1068(title)
msgid "A Table Rewrite Event Trigger Example"
msgstr "Пример событийного триггера, обрабатывающего перезапись таблицы"

#: event-trigger.xml:1070(para)
msgid ""
"Thanks to the <literal>table_rewrite</literal> event, it is possible to "
"implement a table rewriting policy only allowing the rewrite in maintenance "
"windows."
msgstr ""
"Благодаря существованию события <literal>table_rewrite</literal>, можно "
"реализовать политику перезаписи таблиц, допускающую перезапись только в "
"определённое время обслуживания."

#: event-trigger.xml:1077(programlisting)
#, no-wrap
msgid ""
"CREATE OR REPLACE FUNCTION no_rewrite()\n"
" RETURNS event_trigger\n"
" LANGUAGE plpgsql AS\n"
"$$\n"
"---\n"
"--- Implement local Table Rewriting policy:\n"
"---   public.foo is not allowed rewriting, ever\n"
"---   other tables are only allowed rewriting between 1am and 6am\n"
"---   unless they have more than 100 blocks\n"
"---\n"
"DECLARE\n"
"  table_oid oid := pg_event_trigger_table_rewrite_oid();\n"
"  current_hour integer := extract('hour' from current_time);\n"
"  pages integer;\n"
"  max_pages integer := 100;\n"
"BEGIN\n"
"  IF pg_event_trigger_table_rewrite_oid() = 'public.foo'::regclass\n"
"  THEN\n"
"        RAISE EXCEPTION 'you''re not allowed to rewrite the table %',\n"
"                        table_oid::regclass;\n"
"  END IF;\n"
"\n"
"  SELECT INTO pages relpages FROM pg_class WHERE oid = table_oid;\n"
"  IF pages &gt; max_pages\n"
"  THEN\n"
"        RAISE EXCEPTION 'rewrites only allowed for table with less than % pages',\n"
"                        max_pages;\n"
"  END IF;\n"
"\n"
"  IF current_hour NOT BETWEEN 1 AND 6\n"
"  THEN\n"
"        RAISE EXCEPTION 'rewrites only allowed between 1am and 6am';\n"
"  END IF;\n"
"END;\n"
"$$;\n"
"\n"
"CREATE EVENT TRIGGER no_rewrite_allowed\n"
"                  ON table_rewrite\n"
"   EXECUTE PROCEDURE no_rewrite();"
msgstr ""
"CREATE OR REPLACE FUNCTION no_rewrite()\n"
" RETURNS event_trigger\n"
" LANGUAGE plpgsql AS\n"
"$$\n"
"---\n"
"--- Реализация локальной политики перезаписи таблиц:\n"
"---   перезапись public.foo не допускается,\n"
"---   другие таблицы могут перезаписываться между 1 часом ночи и 6 часами утра,\n"
"---   если только их размер не превышает 100 блоков\n"
"---\n"
"DECLARE\n"
"  table_oid oid := pg_event_trigger_table_rewrite_oid();\n"
"  current_hour integer := extract('hour' from current_time);\n"
"  pages integer;\n"
"  max_pages integer := 100;\n"
"BEGIN\n"
"  IF pg_event_trigger_table_rewrite_oid() = 'public.foo'::regclass\n"
"  THEN\n"
"        RAISE EXCEPTION 'you''re not allowed to rewrite the table %',\n"
"                        table_oid::regclass;\n"
"  END IF;\n"
"\n"
"  SELECT INTO pages relpages FROM pg_class WHERE oid = table_oid;\n"
"  IF pages &gt; max_pages\n"
"  THEN\n"
"        RAISE EXCEPTION 'rewrites only allowed for table with less than % pages',\n"
"                        max_pages;\n"
"  END IF;\n"
"\n"
"  IF current_hour NOT BETWEEN 1 AND 6\n"
"  THEN\n"
"        RAISE EXCEPTION 'rewrites only allowed between 1am and 6am';\n"
"  END IF;\n"
"END;\n"
"$$;\n"
"\n"
"CREATE EVENT TRIGGER no_rewrite_allowed\n"
"                  ON table_rewrite\n"
"   EXECUTE PROCEDURE no_rewrite();"

#: event-trigger.xml:1075(para)
msgid "Here's an example implementing such a policy. <placeholder-1/>"
msgstr ""
"Следующий пример демонстрирует реализацию такой политики. <placeholder-1/>"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: event-trigger.xml:0(None)
msgid "translator-credits"
msgstr "translator-credits"
