# Alexander Lakhin <a.lakhin@postgrespro.ru>, 2012, 2013, 2015, 2016.
# Pavel Luzanov <p.luzanov@postgrespro.ru>, 2015, 2016.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2016-08-19 11:33+0300\n"
"PO-Revision-Date: 2016-04-13 09:36+0300\n"
"Language-Team: Russian <pgsql-docs@lists.postgrespro.ru>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Lokalize 2.0\n"

#: replication-origins.xml:4(title)
msgid "Replication Progress Tracking"
msgstr "Отслеживание прогресса репликации"

#: replication-origins.xml:6(indexterm)
msgid "<primary>Replication Progress Tracking</primary>"
msgstr "<primary>Отслеживание прогресса репликации</primary>"

#: replication-origins.xml:9(indexterm)
msgid "<primary>Replication Origins</primary>"
msgstr "<primary>Источники репликации</primary>"

#: replication-origins.xml:20(para)
msgid "How to safely keep track of replication progress"
msgstr "Как надёжно отслеживать прогресс репликации"

#: replication-origins.xml:23(para)
msgid ""
"How to change replication behavior based on the origin of a row; for "
"example, to prevent loops in bi-directional replication setups"
msgstr ""
"Как менять поведение репликации в зависимости от источника строки; например, "
"для предотвращения циклов при двунаправленной репликации"

#: replication-origins.xml:13(para)
msgid ""
"Replication origins are intended to make it easier to implement logical "
"replication solutions on top of <link linkend=\"logicaldecoding\">logical "
"decoding</link>. They provide a solution to two common problems: "
"<placeholder-1/>"
msgstr ""
"Инфраструктура источников репликации введена для упрощения реализации "
"решений логической репликации на основе <link linkend=\"logicaldecoding"
"\">логического декодирования</link>. Она помогает решить две "
"распространённых проблемы: <placeholder-1/>"

#: replication-origins.xml:30(para)
msgid ""
"Replication origins have just two properties, a name and an OID. The name, "
"which is what should be used to refer to the origin across systems, is free-"
"form <type>text</type>. It should be used in a way that makes conflicts "
"between replication origins created by different replication solutions "
"unlikely; e.g. by prefixing the replication solution's name to it. The OID "
"is used only to avoid having to store the long version in situations where "
"space efficiency is important. It should never be shared across systems."
msgstr ""
"Источники репликации имеют только два свойства: имя и OID. Имя, по которому "
"к источнику следует обращаться из разных систем, задаётся значением типа "
"<type>text</type> в произвольной форме. Его следует выбирать так, чтобы "
"конфликты между источниками репликации, созданными различными средствами "
"репликации были маловероятны; например, добавлять в начало обозначение "
"средства репликации. OID используется только для того, чтобы не приходилось "
"хранить длинное имя там, где требуется минимизировать объём. Он не может "
"разделяться между разными системами."

#: replication-origins.xml:41(para)
msgid ""
"Replication origins can be created using the function <link linkend=\"pg-"
"replication-origin-create\"><function>pg_replication_origin_create()</"
"function></link>; dropped using <link linkend=\"pg-replication-origin-drop"
"\"><function>pg_replication_origin_drop()</function></link>; and seen in the "
"<link linkend=\"catalog-pg-replication-origin"
"\"><structname>pg_replication_origin</structname></link> system catalog."
msgstr ""
"Источник репликации можно создать функцией <link linkend=\"pg-replication-"
"origin-create\"><function>pg_replication_origin_create()</function></link>; "
"удалить функцией <link linkend=\"pg-replication-origin-drop"
"\"><function>pg_replication_origin_drop()</function></link>; и увидеть в "
"системном каталоге <link linkend=\"catalog-pg-replication-origin"
"\"><structname>pg_replication_origin</structname></link>."

#: replication-origins.xml:51(para)
msgid ""
"One nontrivial part of building a replication solution is to keep track of "
"replay progress in a safe manner. When the applying process, or the whole "
"cluster, dies, it needs to be possible to find out up to where data has "
"successfully been replicated. Naive solutions to this, such as updating a "
"row in a table for every replayed transaction, have problems like run-time "
"overhead and database bloat."
msgstr ""
"Одной из нетривиальных задач при организации репликации является надёжное "
"отслеживание прогресса воспроизведения. Например, когда применяющий "
"изменения процесс (или весь кластер) умирает, нужно иметь возможность "
"понять, какие данные были переданы успешно. Наивные решения этой проблемы, "
"такие как изменение строки в некоторой таблице для каждой воспроизведённой "
"транзакции, чреваты дополнительной нагрузкой во время выполнения и "
"замусориванием базы данных."

#: replication-origins.xml:60(para)
msgid ""
"Using the replication origin infrastructure a session can be marked as "
"replaying from a remote node (using the <link linkend=\"pg-replication-"
"origin-session-setup\"><function>pg_replication_origin_session_setup()</"
"function></link> function). Additionally the <acronym>LSN</acronym> and "
"commit time stamp of every source transaction can be configured on a per "
"transaction basis using <link linkend=\"pg-replication-origin-xact-setup"
"\"><function>pg_replication_origin_xact_setup()</function></link>. If that's "
"done replication progress will persist in a crash safe manner. Replay "
"progress for all replication origins can be seen in the <link linkend=\"view-"
"pg-replication-origin-status\"><structname>pg_replication_origin_status</"
"structname></link> view. An individual origin's progress, e.g. when resuming "
"replication, can be acquired using <link linkend=\"pg-replication-origin-"
"progress\"><function>pg_replication_origin_progress()</function></link> for "
"any origin or <link linkend=\"pg-replication-origin-session-progress"
"\"><function>pg_replication_origin_session_progress()</function></link> for "
"the origin configured in the current session."
msgstr ""
"С использованием инфраструктуры источников репликации сеанс может быть "
"помечен как воспроизводящий изменения с удалённого узла (с помощью функции "
"<link linkend=\"pg-replication-origin-session-setup"
"\"><function>pg_replication_origin_session_setup()</function></link>). В "
"дополнение к этому для каждой транзакции из источника можно задать "
"<acronym>LSN</acronym> и время фиксации, вызвав <link linkend=\"pg-"
"replication-origin-xact-setup"
"\"><function>pg_replication_origin_xact_setup()</function></link>. Если "
"сделать всё это, прогресс репликации можно будет отслеживать надёжным "
"образом. Прогресс воспроизведения для всех источников репликации можно "
"увидеть в представлении <link linkend=\"view-pg-replication-origin-status"
"\"><structname>pg_replication_origin_status</structname></link>. Прогресс "
"отдельного источника, например, при возобновлении репликации, можно получить "
"для любого источника, воспользовавшись функцией <link linkend=\"pg-"
"replication-origin-progress\"><function>pg_replication_origin_progress()</"
"function></link>, или для источника, настроенного в текущем сеансе, с "
"помощью <link linkend=\"pg-replication-origin-session-progress"
"\"><function>pg_replication_origin_session_progress()</function></link>."

#: replication-origins.xml:80(para)
msgid ""
"In replication topologies more complex than replication from exactly one "
"system to one other system, another problem can be that it is hard to avoid "
"replicating replayed rows again. That can lead both to cycles in the "
"replication and inefficiencies. Replication origins provide an optional "
"mechanism to recognize and prevent that. When configured using the functions "
"referenced in the previous paragraph, every change and transaction passed to "
"output plugin callbacks (see <xref linkend=\"logicaldecoding-output-plugin\"/"
">) generated by the session is tagged with the replication origin of the "
"generating session. This allows treating them differently in the output "
"plugin, e.g. ignoring all but locally-originating rows. Additionally the "
"<link linkend=\"logicaldecoding-output-plugin-filter-origin"
"\"><function>filter_by_origin_cb</function></link> callback can be used to "
"filter the logical decoding change stream based on the source. While less "
"flexible, filtering via that callback is considerably more efficient than "
"doing it in the output plugin."
msgstr ""
"В топологиях репликации более сложных, чем простая репликация с одной "
"системы в другую, возможна ещё одна проблема — повторная репликация уже "
"воспроизведённых строк, что может приводить к зацикливанию и снижению "
"эффективности. В качестве механизма выявления и предотвращения повторной "
"репликации так же могут оказаться полезны источники репликации. Если "
"воспользоваться функциями, упомянутыми в предыдущем абзаце, во все "
"поступающие в сеансе транзакции и изменения, передаваемые обработчикам "
"модулей вывода (см. <xref remap=\"4\" linkend=\"logicaldecoding-output-plugin"
"\"/>), добавляется пометка источника репликации для текущего сеанса. Это "
"позволяет обрабатывать их в модуле вывода по-разному, например, игнорировать "
"все строки, кроме имеющих локальное происхождение. Кроме того, обработчик "
"вызова <link linkend=\"logicaldecoding-output-plugin-filter-origin"
"\"><function>filter_by_origin_cb</function></link> позволяет отфильтровать "
"поток изменений логического декодирования в зависимости от источника. "
"Фильтрация через этот обработчик не так гибка, как проверка записей внутри "
"модуля вывода, но зато гораздо эффективнее."

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: replication-origins.xml:0(None)
msgid "translator-credits"
msgstr "translator-credits"
