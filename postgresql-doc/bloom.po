# Alexander Lakhin <a.lakhin@postgrespro.ru>, 2012, 2013, 2015, 2016.
# Pavel Luzanov <p.luzanov@postgrespro.ru>, 2015, 2016.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2016-08-19 11:31+0300\n"
"PO-Revision-Date: 2016-04-13 09:36+0300\n"
"Language-Team: Russian <pgsql-docs@lists.postgrespro.ru>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Lokalize 2.0\n"

#: bloom.xml:5(title)
msgid "bloom"
msgstr "bloom"

#: bloom.xml:7(indexterm)
msgid "<primary>bloom</primary>"
msgstr "<primary>bloom</primary>"

#: bloom.xml:11(para)
msgid ""
"<literal>bloom</literal> provides an index access method based on <ulink url="
"\"http://en.wikipedia.org/wiki/Bloom_filter\">Bloom filters</ulink>."
msgstr ""
"Модуль <literal>bloom</literal> предоставляет метод доступа индекса, "
"основанный на <ulink url=\"http://en.wikipedia.org/wiki/Bloom_filter"
"\">фильтрах Блума</ulink>."

#: bloom.xml:16(para)
msgid ""
"A Bloom filter is a space-efficient data structure that is used to test "
"whether an element is a member of a set. In the case of an index access "
"method, it allows fast exclusion of non-matching tuples via signatures whose "
"size is determined at index creation."
msgstr ""
"Фильтр Блума представляет собой компактную структуру данных, позволяющую "
"проверить, является ли элемент членом множества. В виде метода доступа "
"индекса он позволяет быстро исключать неподходящие кортежи по сигнатурам, "
"размер которых определяется при создании индекса."

#: bloom.xml:23(para)
msgid ""
"A signature is a lossy representation of the indexed attribute(s), and as "
"such is prone to reporting false positives; that is, it may be reported that "
"an element is in the set, when it is not. So index search results must "
"always be rechecked using the actual attribute values from the heap entry. "
"Larger signatures reduce the odds of a false positive and thus reduce the "
"number of useless heap visits, but of course also make the index larger and "
"hence slower to scan."
msgstr ""
"Сигнатура — это неточное представление проиндексированных атрибутов, "
"вследствие чего оно допускает ложные положительные срабатывания; то есть оно "
"может показывать, что элемент содержится в множестве, хотя это не так. "
"Поэтому результаты поиска по такому индексу должны всегда перепроверяться по "
"фактическим значениям атрибутов записи в таблице. Чем больше размер "
"сигнатуры, тем меньше вероятность ложного срабатывания и число напрасных "
"обращений к таблице, но это, разумеется, влечёт увеличение индекса и "
"замедление сканирования."

#: bloom.xml:33(para)
msgid ""
"This type of index is most useful when a table has many attributes and "
"queries test arbitrary combinations of them. A traditional btree index is "
"faster than a bloom index, but it can require many btree indexes to support "
"all possible queries where one needs only a single bloom index. Note however "
"that bloom indexes only support equality queries, whereas btree indexes can "
"also perform inequality and range searches."
msgstr ""
"Этот тип индекса наиболее полезен, когда в таблице много атрибутов и в "
"запросах проверяются их произвольные сочетания. Традиционный индекс-B-дерево "
"быстрее индекса Блума, но для поддержки всевозможных запросов может "
"потребоваться множество индексов типа B-дерево, при том что индекс Блума "
"нужен всего один. Заметьте, однако, что индексы Блума поддерживают только "
"проверки на равенство, тогда как индексы-B-деревья также полезны при "
"проверке неравенств и поиске в диапазоне."

#: bloom.xml:43(title)
msgid "Parameters"
msgstr "Параметры"

#: bloom.xml:45(para)
msgid ""
"A <literal>bloom</literal> index accepts the following parameters in its "
"<literal>WITH</literal> clause:"
msgstr ""
"Индекс <literal>bloom</literal> принимает в своём предложении <literal>WITH</"
"literal> следующие параметры:"

#: bloom.xml:52(literal)
msgid "length"
msgstr "length"

#: bloom.xml:54(para)
msgid ""
"Length of each signature (index entry) in bits. The default is <literal>80</"
"literal> bits and maximum is <literal>4096</literal>."
msgstr ""
"Длина каждой сигнатуры (элемента индекса) в битах. Значение по умолчанию — "
"<literal>80</literal>, а максимальное значение — <literal>4096</literal>."

#: bloom.xml:63(literal)
msgid "col1 &mdash; col32"
msgstr "col1 &mdash; col32"

#: bloom.xml:65(para)
msgid ""
"Number of bits generated for each index column. Each parameter's name refers "
"to the number of the index column that it controls. The default is "
"<literal>2</literal> bits and maximum is <literal>4095</literal>. Parameters "
"for index columns not actually used are ignored."
msgstr ""
"Число битов, генерируемых для каждого столбца индекса. В имени параметра "
"отражается номер столбца индекса, для которого это число задаётся. Значение "
"по умолчанию — <literal>2</literal> бита, а максимум — <literal>4095</"
"literal>. Параметры для неиспользуемых столбцов индекса игнорируются."

#: bloom.xml:77(title)
msgid "Examples"
msgstr "Примеры"

#: bloom.xml:79(para)
msgid "This is an example of creating a bloom index:"
msgstr "Пример создания индекса bloom:"

#: bloom.xml:83(programlisting)
#, no-wrap
msgid ""
"CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)\n"
"       WITH (length=80, col1=2, col2=2, col3=4);"
msgstr ""
"CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)\n"
"       WITH (length=80, col1=2, col2=2, col3=4);"

#: bloom.xml:88(para)
msgid ""
"The index is created with a signature length of 80 bits, with attributes i1 "
"and i2 mapped to 2 bits, and attribute i3 mapped to 4 bits. We could have "
"omitted the <literal>length</literal>, <literal>col1</literal>, and "
"<literal>col2</literal> specifications since those have the default values."
msgstr ""
"Эта команда создаёт индекс с длиной сигнатуры 80 бит, в которой атрибуты i1 "
"и i2 отображаются в 2 бита, а атрибут i3 — в 4. Мы могли бы опустить "
"указания <literal>length</literal>, <literal>col1</literal> и <literal>col2</"
"literal>, так как в них задаются значения по умолчанию."

#: bloom.xml:95(para)
msgid ""
"Here is a more complete example of bloom index definition and usage, as well "
"as a comparison with equivalent btree indexes. The bloom index is "
"considerably smaller than the btree index, and can perform better."
msgstr ""
"Ниже представлен более полный пример определения и использования индекса "
"Блума, а также приводится сравнение его с равнозначным индексом-B-деревом. "
"Видно, что индекс Блума значительно меньше индекса-B-дерева, и при этом он "
"может работать быстрее."

#: bloom.xml:101(programlisting)
#, no-wrap
msgid ""
"=# CREATE TABLE tbloom AS\n"
"   SELECT\n"
"     (random() * 1000000)::int as i1,\n"
"     (random() * 1000000)::int as i2,\n"
"     (random() * 1000000)::int as i3,\n"
"     (random() * 1000000)::int as i4,\n"
"     (random() * 1000000)::int as i5,\n"
"     (random() * 1000000)::int as i6\n"
"   FROM\n"
"  generate_series(1,10000000);\n"
"SELECT 10000000\n"
"=# CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);\n"
"CREATE INDEX\n"
"=# SELECT pg_size_pretty(pg_relation_size('bloomidx'));\n"
" pg_size_pretty\n"
"----------------\n"
" 153 MB\n"
"(1 row)\n"
"=# CREATE index btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);\n"
"CREATE INDEX\n"
"=# SELECT pg_size_pretty(pg_relation_size('btreeidx'));\n"
" pg_size_pretty\n"
"----------------\n"
" 387 MB\n"
"(1 row)"
msgstr ""
"=# CREATE TABLE tbloom AS\n"
"   SELECT\n"
"     (random() * 1000000)::int as i1,\n"
"     (random() * 1000000)::int as i2,\n"
"     (random() * 1000000)::int as i3,\n"
"     (random() * 1000000)::int as i4,\n"
"     (random() * 1000000)::int as i5,\n"
"     (random() * 1000000)::int as i6\n"
"   FROM\n"
"  generate_series(1,10000000);\n"
"SELECT 10000000\n"
"=# CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);\n"
"CREATE INDEX\n"
"=# SELECT pg_size_pretty(pg_relation_size('bloomidx'));\n"
" pg_size_pretty\n"
"----------------\n"
" 153 MB\n"
"(1 row)\n"
"=# CREATE index btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);\n"
"CREATE INDEX\n"
"=# SELECT pg_size_pretty(pg_relation_size('btreeidx'));\n"
" pg_size_pretty\n"
"----------------\n"
" 387 MB\n"
"(1 row)"

#: bloom.xml:131(programlisting)
#, no-wrap
msgid ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                 QUERY PLAN\n"
"------------------------------------------------------------------------------------------------------------\n"
" Seq Scan on tbloom  (cost=0.00..213694.08 rows=1 width=24) (actual time=1445.438..1445.438 rows=0 loops=1)\n"
"   Filter: ((i2 = 898732) AND (i5 = 123451))\n"
"   Rows Removed by Filter: 10000000\n"
" Planning time: 0.177 ms\n"
" Execution time: 1445.473 ms\n"
"(5 rows)"
msgstr ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                 QUERY PLAN\n"
"------------------------------------------------------------------------------------------------------------\n"
" Seq Scan on tbloom  (cost=0.00..213694.08 rows=1 width=24) (actual time=1445.438..1445.438 rows=0 loops=1)\n"
"   Filter: ((i2 = 898732) AND (i5 = 123451))\n"
"   Rows Removed by Filter: 10000000\n"
" Planning time: 0.177 ms\n"
" Execution time: 1445.473 ms\n"
"(5 rows)"

#: bloom.xml:129(para)
msgid ""
"A sequential scan over this large table takes a long time: <placeholder-1/>"
msgstr ""
"Последовательное сканирование по этой большой таблице выполняется долго: "
"<placeholder-1/>"

#: bloom.xml:147(programlisting)
#, no-wrap
msgid ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                           QUERY PLAN\n"
"--------------------------------------------------------------------------------------------------------------------------------\n"
" Index Only Scan using btreeidx on tbloom  (cost=0.56..298311.96 rows=1 width=24) (actual time=445.709..445.709 rows=0 loops=1)\n"
"   Index Cond: ((i2 = 898732) AND (i5 = 123451))\n"
"   Heap Fetches: 0\n"
" Planning time: 0.193 ms\n"
" Execution time: 445.770 ms\n"
"(5 rows)"
msgstr ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                           QUERY PLAN\n"
"--------------------------------------------------------------------------------------------------------------------------------\n"
" Index Only Scan using btreeidx on tbloom  (cost=0.56..298311.96 rows=1 width=24) (actual time=445.709..445.709 rows=0 loops=1)\n"
"   Index Cond: ((i2 = 898732) AND (i5 = 123451))\n"
"   Heap Fetches: 0\n"
" Planning time: 0.193 ms\n"
" Execution time: 445.770 ms\n"
"(5 rows)"

#: bloom.xml:144(para)
msgid ""
"So the planner will usually select an index scan if possible. With a btree "
"index, we get results like this: <placeholder-1/>"
msgstr ""
"Поэтому планировщик обычно предпочтёт сканирование по индексу, если это "
"возможно. Индекс-B-дерево даёт такие результаты: <placeholder-1/>"

#: bloom.xml:162(programlisting)
#, no-wrap
msgid ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                        QUERY PLAN\n"
"---------------------------------------------------------------------------------------------------------------------------\n"
" Bitmap Heap Scan on tbloom  (cost=178435.39..178439.41 rows=1 width=24) (actual time=76.698..76.698 rows=0 loops=1)\n"
"   Recheck Cond: ((i2 = 898732) AND (i5 = 123451))\n"
"   Rows Removed by Index Recheck: 2439\n"
"   Heap Blocks: exact=2408\n"
"   -&gt;  Bitmap Index Scan on bloomidx  (cost=0.00..178435.39 rows=1 width=0) (actual time=72.455..72.455 rows=2439 loops=1)\n"
"         Index Cond: ((i2 = 898732) AND (i5 = 123451))\n"
" Planning time: 0.475 ms\n"
" Execution time: 76.778 ms\n"
"(8 rows)"
msgstr ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                        QUERY PLAN\n"
"---------------------------------------------------------------------------------------------------------------------------\n"
" Bitmap Heap Scan on tbloom  (cost=178435.39..178439.41 rows=1 width=24) (actual time=76.698..76.698 rows=0 loops=1)\n"
"   Recheck Cond: ((i2 = 898732) AND (i5 = 123451))\n"
"   Rows Removed by Index Recheck: 2439\n"
"   Heap Blocks: exact=2408\n"
"   -&gt;  Bitmap Index Scan on bloomidx  (cost=0.00..178435.39 rows=1 width=0) (actual time=72.455..72.455 rows=2439 loops=1)\n"
"         Index Cond: ((i2 = 898732) AND (i5 = 123451))\n"
" Planning time: 0.475 ms\n"
" Execution time: 76.778 ms\n"
"(8 rows)"

#: bloom.xml:160(para)
msgid ""
"Bloom is better than btree in handling this type of search: <placeholder-1/> "
"Note the relatively large number of false positives: 2439 rows were selected "
"to be visited in the heap, but none actually matched the query. We could "
"reduce that by specifying a larger signature length. In this example, "
"creating the index with <literal>length=200</literal> reduced the number of "
"false positives to 55; but it doubled the index size (to 306 MB) and ended "
"up being slower for this query (125 ms overall)."
msgstr ""
"При таком поиске Блум оказывается лучше B-дерева: <placeholder-1/> Обратите "
"внимание на относительно большое количество ложных срабатываний: для "
"перепроверки по куче были отобраны 2439 строк, но на самом деле ни одна из "
"них не удовлетворила запросу. Мы можем уменьшить это количество, создав "
"сигнатуру большей длины. В данном примере при создании индекса с "
"<literal>length=200</literal> число ложных срабатываний уменьшилось до 55, "
"но размер индекса удвоился (до 306 Мбайт) и запрос стал выполняться дольше "
"(125 мс)."

#: bloom.xml:189(programlisting)
#, no-wrap
msgid ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                          QUERY PLAN\n"
"------------------------------------------------------------------------------------------------------------------------------\n"
" Bitmap Heap Scan on tbloom  (cost=9.29..13.30 rows=1 width=24) (actual time=0.148..0.148 rows=0 loops=1)\n"
"   Recheck Cond: ((i5 = 123451) AND (i2 = 898732))\n"
"   -&gt;  BitmapAnd  (cost=9.29..9.29 rows=1 width=0) (actual time=0.145..0.145 rows=0 loops=1)\n"
"         -&gt;  Bitmap Index Scan on tbloom_i5_idx  (cost=0.00..4.52 rows=11 width=0) (actual time=0.089..0.089 rows=10 loops=1)\n"
"               Index Cond: (i5 = 123451)\n"
"         -&gt;  Bitmap Index Scan on tbloom_i2_idx  (cost=0.00..4.52 rows=11 width=0) (actual time=0.048..0.048 rows=8 loops=1)\n"
"               Index Cond: (i2 = 898732)\n"
" Planning time: 2.049 ms\n"
" Execution time: 0.280 ms\n"
"(9 rows)"
msgstr ""
"=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;\n"
"                                                          QUERY PLAN\n"
"------------------------------------------------------------------------------------------------------------------------------\n"
" Bitmap Heap Scan on tbloom  (cost=9.29..13.30 rows=1 width=24) (actual time=0.148..0.148 rows=0 loops=1)\n"
"   Recheck Cond: ((i5 = 123451) AND (i2 = 898732))\n"
"   -&gt;  BitmapAnd  (cost=9.29..9.29 rows=1 width=0) (actual time=0.145..0.145 rows=0 loops=1)\n"
"         -&gt;  Bitmap Index Scan on tbloom_i5_idx  (cost=0.00..4.52 rows=11 width=0) (actual time=0.089..0.089 rows=10 loops=1)\n"
"               Index Cond: (i5 = 123451)\n"
"         -&gt;  Bitmap Index Scan on tbloom_i2_idx  (cost=0.00..4.52 rows=11 width=0) (actual time=0.048..0.048 rows=8 loops=1)\n"
"               Index Cond: (i2 = 898732)\n"
" Planning time: 2.049 ms\n"
" Execution time: 0.280 ms\n"
"(9 rows)"

#: bloom.xml:184(para)
msgid ""
"Now, the main problem with the btree search is that btree is inefficient "
"when the search conditions do not constrain the leading index column(s). A "
"better strategy for btree is to create a separate index on each column. Then "
"the planner will choose something like this: <placeholder-1/> Although this "
"query runs much faster than with either of the single indexes, we pay a "
"large penalty in index size. Each of the single-column btree indexes "
"occupies 214 MB, so the total space needed is over 1.2GB, more than 8 times "
"the space used by the bloom index."
msgstr ""
"При таком подходе основная проблема поиска по B-дереву состоит в том, что B-"
"дерево неэффективно, когда условия поиска не ограничивают ведущие столбцы "
"индекса. Поэтому, применяя индексы типа B-дерево, лучше создавать отдельные "
"индексы для каждого столбца. В этом случае планировщик построит примерно "
"такой план: <placeholder-1/> Хотя этот запрос выполняется гораздо быстрее, "
"чем с каким-либо одиночным индексом, мы платим за это увеличением размера "
"индекса. Каждый индекс-B-дерево занимает 214 Мбайт, так что общий объём "
"индексов превышает 1.2 Гбайта, что в 8 раз больше размера индекса Блума."

#: bloom.xml:212(title)
msgid "Operator Class Interface"
msgstr "Интерфейс класса операторов"

#: bloom.xml:214(para)
msgid ""
"An operator class for bloom indexes requires only a hash function for the "
"indexed data type and an equality operator for searching. This example shows "
"the operator class definition for the <type>text</type> data type:"
msgstr ""
"Класс операторов для индексов Блума требует наличия только хеш-функции для "
"индексируемого типа данных и оператора равенства для поиска. Этот пример "
"демонстрирует соответствующее определение класса операторов для типа "
"<type>text</type>:"

#: bloom.xml:220(programlisting)
#, no-wrap
msgid ""
"CREATE OPERATOR CLASS text_ops\n"
"DEFAULT FOR TYPE text USING bloom AS\n"
"    OPERATOR    1   =(text, text),\n"
"    FUNCTION    1   hashtext(text);"
msgstr ""
"CREATE OPERATOR CLASS text_ops\n"
"DEFAULT FOR TYPE text USING bloom AS\n"
"    OPERATOR    1   =(text, text),\n"
"    FUNCTION    1   hashtext(text);"

#: bloom.xml:229(title)
msgid "Limitations"
msgstr "Ограничения"

#: bloom.xml:233(para)
msgid ""
"Only operator classes for <type>int4</type> and <type>text</type> are "
"included with the module."
msgstr ""
"В этот модуль включены только классы операторов для <type>int4</type> и "
"<type>text</type>."

#: bloom.xml:240(para)
msgid ""
"Only the <literal>=</literal> operator is supported for search. But it is "
"possible to add support for arrays with union and intersection operations in "
"the future."
msgstr ""
"При поиске поддерживается только оператор <literal>=</literal>. Но в будущем "
"возможно добавление поддержки для массивов с операциями объединения и "
"пересечения."

#: bloom.xml:251(title)
msgid "Authors"
msgstr "Авторы"

#: bloom.xml:253(para)
msgid ""
"Teodor Sigaev <email>teodor@postgrespro.ru</email>, Postgres Professional, "
"Moscow, Russia"
msgstr ""
"Фёдор Сигаев <email>teodor@postgrespro.ru</email>, Postgres Professional, "
"Москва, Россия"

#: bloom.xml:258(para)
msgid ""
"Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>, Postgres "
"Professional, Moscow, Russia"
msgstr ""
"Александр Коротков <email>a.korotkov@postgrespro.ru</email>, Postgres "
"Professional, Москва, Россия"

#: bloom.xml:263(para)
msgid ""
"Oleg Bartunov <email>obartunov@postgrespro.ru</email>, Postgres "
"Professional, Moscow, Russia"
msgstr ""
"Олег Бартунов <email>obartunov@postgrespro.ru</email>, Postgres "
"Professional, Москва, Россия"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: bloom.xml:0(None)
msgid "translator-credits"
msgstr "translator-credits"

#~ msgid "Introduction"
#~ msgstr "Введение"

#, fuzzy
#~ msgid "Number of bits for corresponding column"
#~ msgstr "Имя нового или существующего столбца."

#, fuzzy
#~ msgid "Here is a fuller example of index definition and usage:"
#~ msgstr "Пример его использования:"
