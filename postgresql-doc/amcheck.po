# Alexander Lakhin <a.lakhin@postgrespro.ru>, 2017.
msgid ""
msgstr ""
"Project-Id-Version: REL 10_BETA1\n"
"POT-Creation-Date: 2017-07-31 21:46+0300\n"
"PO-Revision-Date: 2017-09-28 17:43+0300\n"
"Last-Translator: Alexander Lakhin <a.lakhin@postgrespro.ru>\n"
"Language-Team: Russian <pgsql-docs@lists.postgrespro.ru>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Lokalize 2.0\n"

#. +> REL_10
#: amcheck.xml:5(title)
msgid "amcheck"
msgstr "amcheck"

#. +> REL_10
#: amcheck.xml:7(indexterm)
msgid "<primary>amcheck</primary>"
msgstr "<primary>amcheck</primary>"

#. +> REL_10
#: amcheck.xml:11(para)
msgid ""
"The <filename>amcheck</filename> module provides functions that allow you to "
"verify the logical consistency of the structure of indexes. If the structure "
"appears to be valid, no error is raised."
msgstr ""
"Модуль <filename>amcheck</filename> предоставляет функции, позволяющие "
"проверять логическую целостность структуры индексов. Если нарушения "
"структуры не обнаруживаются, эти функции отрабатывают без ошибок."

#. +> REL_10
#: amcheck.xml:17(para)
msgid ""
"The functions verify various <emphasis>invariants</emphasis> in the "
"structure of the representation of particular indexes. The correctness of "
"the access method functions behind index scans and other important "
"operations relies on these invariants always holding. For example, certain "
"functions verify, among other things, that all B-Tree pages have items in "
"<quote>logical</quote> order (e.g., for B-Tree indexes on <type>text</type>, "
"index tuples should be in collated lexical order). If that particular "
"invariant somehow fails to hold, we can expect binary searches on the "
"affected page to incorrectly guide index scans, resulting in wrong answers "
"to SQL queries."
msgstr ""
"Эти функции проверяют различные <emphasis>инварианты</emphasis> в структуре "
"представления определённых индексов. Правильность работы функций методов "
"доступа, стоящих за сканированием индекса и другими важными операциями, "
"зависит от всегда соблюдаемых инвариантов. Например, определённые функции "
"проверяют, помимо остальных вещей, что все страницы B-дерева содержат "
"элементы в <quote>логическом</quote> порядке (например, индекс-B-дерево, "
"построенный по столбцу <type>text</type>, должен содержать кортежи, "
"упорядоченные в лексическом порядке с учётом правила сортировки). Если этот "
"конкретный инвариант каким-то образом нарушается, следует ожидать, что "
"бинарный поиск на затронутой странице введёт в заблуждение процедуру "
"сканирования индекса, что приведёт к неверным результатам запросов SQL."

#. +> REL_10
#: amcheck.xml:30(para)
msgid ""
"Verification is performed using the same procedures as those used by index "
"scans themselves, which may be user-defined operator class code. For "
"example, B-Tree index verification relies on comparisons made with one or "
"more B-Tree support function 1 routines. See <xref linkend=\"xindex-support"
"\"/> for details of operator class support functions."
msgstr ""
"Проверка выполняется теми же процедурами, что используются при сканировании "
"индекса, и это может быть код пользовательского класса операторов. Например, "
"проверка индекса-B-дерева задействует сравнения, выполняемые одной или "
"несколькими опорными функциями B-дерева под номером 1. Подробнее опорные "
"функции класса операторов описываются в <xref remap=\"6\" linkend=\"xindex-"
"support\"/>."

#. +> REL_10
#: amcheck.xml:38(para)
msgid "<filename>amcheck</filename> functions may be used only by superusers."
msgstr ""
"Функции <filename>amcheck</filename> могут выполнять только "
"суперпользователи."

#. +> REL_10
#: amcheck.xml:43(title)
msgid "Functions"
msgstr "Функции"

#. +> REL_10
#: amcheck.xml:48(function)
msgid "bt_index_check(index regclass) returns void"
msgstr "bt_index_check(index regclass) returns void"

#. +> REL_10
#: amcheck.xml:49(indexterm)
msgid "<primary>bt_index_check</primary>"
msgstr "<primary>bt_index_check</primary>"

#. +> REL_10
#: amcheck.xml:55(para)
msgid ""
"<function>bt_index_check</function> tests that its target, a B-Tree index, "
"respects a variety of invariants. Example usage: <screen>\n"
"test=# SELECT bt_index_check(c.oid), c.relname, c.relpages\n"
"FROM pg_index i\n"
"JOIN pg_opclass op ON i.indclass[0] = op.oid\n"
"JOIN pg_am am ON op.opcmethod = am.oid\n"
"JOIN pg_class c ON i.indexrelid = c.oid\n"
"JOIN pg_namespace n ON c.relnamespace = n.oid\n"
"WHERE am.amname = 'btree' AND n.nspname = 'pg_catalog'\n"
"-- Don't check temp tables, which may be from another session:\n"
"AND c.relpersistence != 't'\n"
"-- Function may throw an error when this is omitted:\n"
"AND i.indisready AND i.indisvalid\n"
"ORDER BY c.relpages DESC LIMIT 10;\n"
" bt_index_check |             relname             | relpages \n"
"----------------+---------------------------------+----------\n"
"                | pg_depend_reference_index       |       43\n"
"                | pg_depend_depender_index        |       40\n"
"                | pg_proc_proname_args_nsp_index  |       31\n"
"                | pg_description_o_c_o_index      |       21\n"
"                | pg_attribute_relid_attnam_index |       14\n"
"                | pg_proc_oid_index               |       10\n"
"                | pg_attribute_relid_attnum_index |        9\n"
"                | pg_amproc_fam_proc_index        |        5\n"
"                | pg_amop_opr_fam_index           |        5\n"
"                | pg_amop_fam_strat_index         |        5\n"
"(10 rows)\n"
"</screen> This example shows a session that performs verification of every "
"catalog index in the database <quote>test</quote>. Details of just the 10 "
"largest indexes verified are displayed. Since no error is raised, all "
"indexes tested appear to be logically consistent. Naturally, this query "
"could easily be changed to call <function>bt_index_check</function> for "
"every index in the database where verification is supported."
msgstr ""
"<function>bt_index_check</function> проверяет, соблюдаются ли в целевом "
"объекте, индексе-B-дереве, различные инварианты. Пример использования: "
"<screen>\n"
"test=# SELECT bt_index_check(c.oid), c.relname, c.relpages\n"
"FROM pg_index i\n"
"JOIN pg_opclass op ON i.indclass[0] = op.oid\n"
"JOIN pg_am am ON op.opcmethod = am.oid\n"
"JOIN pg_class c ON i.indexrelid = c.oid\n"
"JOIN pg_namespace n ON c.relnamespace = n.oid\n"
"WHERE am.amname = 'btree' AND n.nspname = 'pg_catalog'\n"
"-- Не проверять временные таблицы (они могут относиться к другим сеансам):\n"
"AND c.relpersistence != 't'\n"
"-- Функция может выдать ошибку без этих условий:\n"
"AND i.indisready AND i.indisvalid\n"
"ORDER BY c.relpages DESC LIMIT 10;\n"
" bt_index_check |             relname             | relpages \n"
"----------------+---------------------------------+----------\n"
"                | pg_depend_reference_index       |       43\n"
"                | pg_depend_depender_index        |       40\n"
"                | pg_proc_proname_args_nsp_index  |       31\n"
"                | pg_description_o_c_o_index      |       21\n"
"                | pg_attribute_relid_attnam_index |       14\n"
"                | pg_proc_oid_index               |       10\n"
"                | pg_attribute_relid_attnum_index |        9\n"
"                | pg_amproc_fam_proc_index        |        5\n"
"                | pg_amop_opr_fam_index           |        5\n"
"                | pg_amop_fam_strat_index         |        5\n"
"(10 rows)\n"
"</screen> Этот пример демонстрирует сеанс проверки всех индексов системных "
"каталогов в базе данных <quote>test</quote>. В результате выводится "
"информация только о 10 наибольших индексов из всех проверенных. Так как "
"ошибки не было, все проверенные индексы представляются логически целостными. "
"Естественно, этот запрос можно легко изменить, чтобы функция "
"<function>bt_index_check</function> вызывалась для всех индексов в базе "
"данных, которые поддерживают эту проверку."

#. +> REL_10
#: amcheck.xml:93(para)
msgid ""
"<function>bt_index_check</function> acquires an <literal>AccessShareLock</"
"literal> on the target index and the heap relation it belongs to. This lock "
"mode is the same lock mode acquired on relations by simple <literal>SELECT</"
"literal> statements. <function>bt_index_check</function> does not verify "
"invariants that span child/parent relationships, nor does it verify that the "
"target index is consistent with its heap relation. When a routine, "
"lightweight test for corruption is required in a live production "
"environment, using <function>bt_index_check</function> often provides the "
"best trade-off between thoroughness of verification and limiting the impact "
"on application performance and availability."
msgstr ""
"Функция <function>bt_index_check</function> запрашивает блокировку "
"<literal>AccessShareLock</literal> для целевого индекса и отношения, "
"которому он принадлежит. Это тот же режим блокировки, что запрашивается для "
"отношений обычными операторами <literal>SELECT</literal>. "
"<function>bt_index_check</function> не проверяет инварианты, существующие в "
"иерархии потомок/родитель, а также не проверяет, соответствует ли целевой "
"индекс основному отношению. Когда в работающей производственной среде "
"требуется обыденная лёгкая проверка на наличие нарушений, использование "
"<function>bt_index_check</function> часто будет подходящим компромиссом "
"между полнотой проверки и минимизацией влияния на производительность и "
"доступность приложения."

#. +> REL_10
#: amcheck.xml:112(function)
msgid "bt_index_parent_check(index regclass) returns void"
msgstr "bt_index_parent_check(index regclass) returns void"

#. +> REL_10
#: amcheck.xml:113(indexterm)
msgid "<primary>bt_index_parent_check</primary>"
msgstr "<primary>bt_index_parent_check</primary>"

#. +> REL_10
#: amcheck.xml:119(para)
msgid ""
"<function>bt_index_parent_check</function> tests that its target, a B-Tree "
"index, respects a variety of invariants. The checks performed by "
"<function>bt_index_parent_check</function> are a superset of the checks "
"performed by <function>bt_index_check</function>. "
"<function>bt_index_parent_check</function> can be thought of as a more "
"thorough variant of <function>bt_index_check</function>: unlike "
"<function>bt_index_check</function>, <function>bt_index_parent_check</"
"function> also checks invariants that span parent/child relationships. "
"However, it does not verify that the target index is consistent with its "
"heap relation. <function>bt_index_parent_check</function> follows the "
"general convention of raising an error if it finds a logical inconsistency "
"or other problem."
msgstr ""
"Функция <function>bt_index_parent_check</function> проверяет, соблюдаются ли "
"в целевом объекте, индексе-B-дереве, различные инварианты. Проверки, "
"выполняемые функцией <function>bt_index_parent_check</function>, включают в "
"себя все проверки, которые выполняет <function>bt_index_check</function>. "
"Функцию <function>bt_index_parent_check</function> можно считать более "
"полноценным вариантом <function>bt_index_check</function>: в отличие от "
"<function>bt_index_check</function>, <function>bt_index_parent_check</"
"function> проверяет и инварианты, существующие в иерархии родитель/потомок. "
"Однако и она не проверяет, соответствует ли целевой индекс основному "
"отношению. Функция <function>bt_index_parent_check</function> следует общему "
"соглашению и выдаёт ошибку в случае обнаружения логической несогласованности "
"или другой проблемы."

#. +> REL_10
#: amcheck.xml:135(para)
msgid ""
"A <literal>ShareLock</literal> is required on the target index by "
"<function>bt_index_parent_check</function> (a <literal>ShareLock</literal> "
"is also acquired on the heap relation). These locks prevent concurrent data "
"modification from <command>INSERT</command>, <command>UPDATE</command>, and "
"<command>DELETE</command> commands. The locks also prevent the underlying "
"relation from being concurrently processed by <command>VACUUM</command>, as "
"well as all other utility commands. Note that the function holds locks only "
"while running, not for the entire transaction."
msgstr ""
"Функция <function>bt_index_parent_check</function> запрашивает в целевом "
"индексе блокировку <literal>ShareLock</literal> (также <literal>ShareLock</"
"literal> запрашивается и в основном отношении). Эти блокировки предотвращают "
"одновременное изменение данных командами <command>INSERT</command>, "
"<command>UPDATE</command> и <command>DELETE</command>. Эти блокировки также "
"препятствуют одновременной обработке нижележащего отношения командой "
"<command>VACUUM</command> и другими вспомогательными командами. Заметьте, "
"что эта функция удерживает блокировки только во время выполнения, а не на "
"протяжении всей транзакции."

#. +> REL_10
#: amcheck.xml:146(para)
msgid ""
"<function>bt_index_parent_check</function>'s additional verification is more "
"likely to detect various pathological cases. These cases may involve an "
"incorrectly implemented B-Tree operator class used by the index that is "
"checked, or, hypothetically, undiscovered bugs in the underlying B-Tree "
"index access method code. Note that <function>bt_index_parent_check</"
"function> cannot be used when Hot Standby mode is enabled (i.e., on read-"
"only physical replicas), unlike <function>bt_index_check</function>."
msgstr ""
"Дополнительные проверки, проводимые функцией "
"<function>bt_index_parent_check</function>, более ориентированы на выявление "
"различных патологических случаев. В том числе это может быть неправильно "
"реализованный класс операторов B-дерева, используемый проверяемым индексом, "
"или, гипотетически, неизвестные ошибки в нижележащем коде метода доступа "
"индекса-B-дерева. Заметьте, что функцию <function>bt_index_parent_check</"
"function> нельзя применять, когда включён режим горячего резерва (то есть на "
"физических репликах в режиме «только чтение»), в отличие от "
"<function>bt_index_check</function>."

#. +> REL_10
#: amcheck.xml:163(title)
msgid "Using <filename>amcheck</filename> effectively"
msgstr "Эффективное использование <filename>amcheck</filename>"

#. +> REL_10
#: amcheck.xml:173(para)
msgid ""
"Structural inconsistencies caused by incorrect operator class "
"implementations."
msgstr ""
"Структурные несоответствия, возникающие при некорректной реализации класса "
"операторов."

#. +> REL_10
#: amcheck.xml:177(para)
msgid ""
"This includes issues caused by the comparison rules of operating system "
"collations changing. Comparisons of datums of a collatable type like "
"<type>text</type> must be immutable (just as all comparisons used for B-Tree "
"index scans must be immutable), which implies that operating system "
"collation rules must never change. Though rare, updates to operating system "
"collation rules can cause these issues. More commonly, an inconsistency in "
"the collation order between a master server and a standby server is "
"implicated, possibly because the <emphasis>major</emphasis> operating system "
"version in use is inconsistent. Such inconsistencies will generally only "
"arise on standby servers, and so can generally only be detected on standby "
"servers."
msgstr ""
"В том числе это проблемы, возникающие при изменении правил сравнения в "
"операционной системе. Сравнения данных сортируемого типа, например "
"<type>text</type>, должны быть постоянными (как и все сравнения, применяемые "
"при сканировании индекса-B-дерева), что подразумевает неизменность правил "
"сортировки в операционной системе. Проблемы могут возникать при обновлениях "
"правил в операционной системе, хотя такие случаи редки. Чаще проявляются "
"несоответствия порядка сортировки между ведущим и ведомым сервером, "
"например, из-за различий <emphasis>основных</emphasis> версий используемых "
"операционных систем. Возникающие расхождения обычно наблюдаются только на "
"ведомых серверах, так что и выявить их обычно можно только на них."

#. +> REL_10
#: amcheck.xml:191(para)
msgid ""
"If a problem like this arises, it may not affect each individual index that "
"is ordered using an affected collation, simply because <emphasis>indexed</"
"emphasis> values might happen to have the same absolute ordering regardless "
"of the behavioral inconsistency. See <xref linkend=\"locale\"/> and <xref "
"linkend=\"collation\"/> for further details about how "
"<productname>PostgreSQL</productname> uses operating system locales and "
"collations."
msgstr ""
"Когда возникает подобная проблема, она может затрагивать не абсолютно все "
"индексы, построенные с порочным правилом сортировки, просто потому что "
"<emphasis>индексированные</emphasis> значения могут иметь тот же абсолютный "
"порядок, независящий от различий поведения. За дополнительными сведениями об "
"использовании в <productname>PostgreSQL</productname> правил сортировки и "
"локалей операционной системы обратитесь к <xref remap=\"3\" linkend=\"locale"
"\"/> и <xref remap=\"3\" linkend=\"collation\"/>."

#. +> REL_10
#: amcheck.xml:202(para)
msgid ""
"Corruption caused by hypothetical undiscovered bugs in the underlying "
"<productname>PostgreSQL</productname> access method code or sort code."
msgstr ""
"Повреждения, вызванные гипотетическими неизвестными ошибками в нижележащем "
"коде методов доступа <productname>PostgreSQL</productname> или коде "
"сортировки."

#. +> REL_10
#: amcheck.xml:207(para)
msgid ""
"Automatic verification of the structural integrity of indexes plays a role "
"in the general testing of new or proposed <productname>PostgreSQL</"
"productname> features that could plausibly allow a logical inconsistency to "
"be introduced. One obvious testing strategy is to call <filename>amcheck</"
"filename> functions continuously when running the standard regression tests. "
"See <xref linkend=\"regress-run\"/> for details on running the tests."
msgstr ""
"Автоматическая проверка структурной целостности индексов играет важную роль "
"в общем тестировании новых или предлагаемых возможностей "
"<productname>PostgreSQL</productname>, с которыми может возникнуть "
"логическая несогласованность. И поэтому одна из очевидных стратегий "
"тестирования — регулярно вызывать функции <filename>amcheck</filename> при "
"проведении стандартных регрессионных тестов. Подробнее о выполнении тестов "
"можно узнать в <xref remap=\"6\" linkend=\"regress-run\"/>."

#. +> REL_10
#: amcheck.xml:218(para)
msgid ""
"File system or storage subsystem faults where checksums happen to simply not "
"be enabled."
msgstr ""
"Ошибки в файловой системе или подсистеме хранения, когда просто не включены "
"контрольные суммы."

#. +> REL_10
#: amcheck.xml:222(para)
msgid ""
"Note that <filename>amcheck</filename> examines a page as represented in "
"some shared memory buffer at the time of verification if there is only a "
"shared buffer hit when accessing the block. Consequently, <filename>amcheck</"
"filename> does not necessarily examine data read from the file system at the "
"time of verification. Note that when checksums are enabled, "
"<filename>amcheck</filename> may raise an error due to a checksum failure "
"when a corrupt block is read into a buffer."
msgstr ""
"Заметьте, что <filename>amcheck</filename> рассматривает страницу в том "
"виде, как она представлена в некотором буфере разделяемой памяти к моменту "
"проверки, если при обращению к нужному блоку он уже находится в разделяемом "
"буфере. Вследствие этого, <filename>amcheck</filename> не обязательно видит "
"данные, находящиеся в файловой системе в момент проверки. Заметьте, что "
"когда контрольные суммы включены, <filename>amcheck</filename> может выдать "
"ошибку из-за несоответствия контрольных сумм, если в буфер будет считываться "
"испорченный блок."

#. +> REL_10
#: amcheck.xml:233(para)
msgid ""
"Corruption caused by faulty RAM, and the broader memory subsystem and "
"operating system."
msgstr ""
"Повреждения, вызванные дефектной памятью или вообще подсистемой памяти либо "
"операционной системой."

#. +> REL_10
#: amcheck.xml:237(para)
msgid ""
"<productname>PostgreSQL</productname> does not protect against correctable "
"memory errors and it is assumed you will operate using RAM that uses "
"industry standard Error Correcting Codes (ECC) or better protection. "
"However, ECC memory is typically only immune to single-bit errors, and "
"should not be assumed to provide <emphasis>absolute</emphasis> protection "
"against failures that result in memory corruption."
msgstr ""
"<productname>PostgreSQL</productname> не защищает от ошибок памяти; "
"предполагается, что в эксплуатируемом вами сервере установлена память с ECC "
"(Error Correcting Codes, Коды исправления ошибок) или лучшая защита. Однако "
"память ECC обычно защищает только от ошибок в одном бите и не следует "
"считать её <emphasis>абсолютной</emphasis> защитой от сбоев, приводящих к "
"повреждению памяти."

#. +> REL_10
#: amcheck.xml:165(para)
msgid ""
"<filename>amcheck</filename> can be effective at detecting various types of "
"failure modes that <link linkend=\"app-initdb-data-checksums"
"\"><application>data page checksums</application></link> will always fail to "
"catch. These include: <placeholder-1/> In general, <filename>amcheck</"
"filename> can only prove the presence of corruption; it cannot prove its "
"absence."
msgstr ""
"Модуль <filename>amcheck</filename> может быть полезен для выявления "
"различных типов проблем, которые могут остаться незамеченными при включении "
"<link linkend=\"app-initdb-data-checksums\"><application>контрольных сумм "
"страниц данных</application></link>. В частности это: <placeholder-1/> "
"Вообще говоря, <filename>amcheck</filename> может доказать только наличие "
"повреждений, но не доказать их отсутствие."

#. +> REL_10
#: amcheck.xml:254(title)
msgid "Repairing corruption"
msgstr "Исправление повреждений"

#. +> REL_10
#: amcheck.xml:255(para)
msgid ""
"No error concerning corruption raised by <filename>amcheck</filename> should "
"ever be a false positive. In practice, <filename>amcheck</filename> is more "
"likely to find software bugs than problems with hardware. <filename>amcheck</"
"filename> raises errors in the event of conditions that, by definition, "
"should never happen, and so careful analysis of <filename>amcheck</filename> "
"errors is often required."
msgstr ""
"Выдаваемые <filename>amcheck</filename> ошибки, относящиеся к повреждениям "
"данных, никогда не должны быть ложными. На практике <filename>amcheck</"
"filename> с большей вероятностью обнаружит программные ошибки, чем проблемы "
"с оборудованием. <filename>amcheck</filename> выдаёт ошибки в случае "
"условий, которые никогда не должны наблюдаться по определению, так что "
"ошибки <filename>amcheck</filename>, как правило, требует тщательного "
"анализа."

#. +> REL_10
#: amcheck.xml:263(para)
msgid ""
"There is no general method of repairing problems that <filename>amcheck</"
"filename> detects. An explanation for the root cause of an invariant "
"violation should be sought. <xref linkend=\"pageinspect\"/> may play a "
"useful role in diagnosing corruption that <filename>amcheck</filename> "
"detects. A <command>REINDEX</command> may not be effective in repairing "
"corruption."
msgstr ""
"Общего метода устранения проблем, которые может выявить <filename>amcheck</"
"filename>, не существует. Начать нужно с поиска корня проблемы, приводящей к "
"нарушению инварианта. Полезную роль в диагностике повреждений, которые "
"выявляет <filename>amcheck</filename>, может сыграть <xref linkend="
"\"pageinspect\"/>. Одна лишь команда <command>REINDEX</command> может быть "
"неэффективна, когда потребуется исправить повреждения."

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#. +> REL_10
#: amcheck.xml:0(None)
msgid "translator-credits"
msgstr "translator-credits"
