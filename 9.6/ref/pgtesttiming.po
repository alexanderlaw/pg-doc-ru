# Alexander Lakhin <a.lakhin@postgrespro.ru>, 2012, 2013, 2015, 2016, 2017.
# Pavel Luzanov <p.luzanov@postgrespro.ru>, 2015, 2016.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2017-05-10 10:50+0300\n"
"PO-Revision-Date: 2017-05-12 10:57+0300\n"
"Language-Team: Russian <pgsql-docs@lists.postgrespro.ru>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Lokalize 2.0\n"
"Last-Translator: Alexander Lakhin <a.lakhin@postgrespro.ru>\n"

#: ref/pgtesttiming.xml:5(indexterm)
msgid "<primary>pg_test_timing</primary>"
msgstr "<primary>pg_test_timing</primary>"

#: ref/pgtesttiming.xml:10(application)
msgctxt "application"
msgid "pg_test_timing"
msgstr "pg_test_timing"

#: ref/pgtesttiming.xml:11(manvolnum)
msgid "1"
msgstr "1"

#: ref/pgtesttiming.xml:12(refmiscinfo)
msgid "Application"
msgstr "Приложение"

#: ref/pgtesttiming.xml:16(refname)
msgctxt "refname"
msgid "pg_test_timing"
msgstr "pg_test_timing"

#: ref/pgtesttiming.xml:17(refpurpose)
msgid "measure timing overhead"
msgstr "определить издержки замера времени"

#: ref/pgtesttiming.xml:22(command)
msgctxt "command"
msgid "pg_test_timing"
msgstr "pg_test_timing"

#: ref/pgtesttiming.xml:23(replaceable)
msgid "option"
msgstr "параметр"

#: ref/pgtesttiming.xml:28(title)
msgid "Description"
msgstr "Описание"

#: ref/pgtesttiming.xml:30(para)
msgid ""
"<application>pg_test_timing</application> is a tool to measure the timing "
"overhead on your system and confirm that the system time never moves "
"backwards. Systems that are slow to collect timing data can give less "
"accurate <command>EXPLAIN ANALYZE</command> results."
msgstr ""
"Программа <application>pg_test_timing</application> позволяет оценить "
"издержки замера времени в вашей системе и убедиться в том, что системное "
"время никогда не идёт назад. Системы, в которых замер времени является "
"длительной операцией, дают менее точные результаты <command>EXPLAIN ANALYZE</"
"command>."

#: ref/pgtesttiming.xml:39(title)
msgid "Options"
msgstr "Параметры"

#: ref/pgtesttiming.xml:48(replaceable) ref/pgtesttiming.xml:49(replaceable)
msgid "duration"
msgstr "длительность"

#: ref/pgtesttiming.xml:48(option)
msgid "-d <placeholder-1/>"
msgstr "-d <placeholder-1/>"

#: ref/pgtesttiming.xml:49(option)
msgid "--duration=<placeholder-1/>"
msgstr "--duration=<placeholder-1/>"

#: ref/pgtesttiming.xml:51(para)
msgid ""
"Specifies the test duration, in seconds. Longer durations give slightly "
"better accuracy, and are more likely to discover problems with the system "
"clock moving backwards. The default test duration is 3 seconds."
msgstr ""
"Задаёт продолжительность теста (в секундах). Чем больше эта "
"продолжительность, тем выше точность и больше вероятность обнаружить "
"аномалию с обратным ходом системных часов. По умолчанию время тестирования — "
"3 секунды."

#: ref/pgtesttiming.xml:61(option)
msgid "-V"
msgstr "-V"

#: ref/pgtesttiming.xml:62(option)
msgid "--version"
msgstr "--version"

#: ref/pgtesttiming.xml:64(para)
msgid "Print the <application>pg_test_timing</application> version and exit."
msgstr ""
"Вывести версию <application>pg_test_timing</application> и завершиться."

#: ref/pgtesttiming.xml:71(option)
msgid "-?"
msgstr "-?"

#: ref/pgtesttiming.xml:72(option)
msgid "--help"
msgstr "--help"

#: ref/pgtesttiming.xml:74(para)
msgid ""
"Show help about <application>pg_test_timing</application> command line "
"arguments, and exit."
msgstr ""
"Вывести справку об аргументах командной строки <application>pg_test_timing</"
"application> и завершиться."

#: ref/pgtesttiming.xml:41(para)
msgid ""
"<application>pg_test_timing</application> accepts the following command-line "
"options: <placeholder-1/>"
msgstr ""
"<application>pg_test_timing</application> принимает следующие аргументы "
"командной строки: <placeholder-1/>"

#: ref/pgtesttiming.xml:87(title)
msgid "Usage"
msgstr "Использование"

#: ref/pgtesttiming.xml:90(title)
msgid "Interpreting results"
msgstr "Интерпретация результатов"

#: ref/pgtesttiming.xml:92(para)
msgid ""
"Good results will show most (&gt;90%) individual timing calls take less than "
"one microsecond. Average per loop overhead will be even lower, below 100 "
"nanoseconds. This example from an Intel i7-860 system using a TSC clock "
"source shows excellent performance: <screen>\n"
"Testing timing overhead for 3 seconds.\n"
"Per loop time including overhead: 35.96 nsec\n"
"Histogram of timing durations:\n"
"&lt; usec   % of total      count\n"
"     1     96.40465   80435604\n"
"     2      3.59518    2999652\n"
"     4      0.00015        126\n"
"     8      0.00002         13\n"
"    16      0.00000          2\n"
"</screen>"
msgstr ""
"В благоприятном случае практически все (&gt;90%) отдельные вызовы замеров "
"времени должны выполняться быстрее одной микросекунды. Средние издержки "
"замера на цикл должны быть ещё меньше, в пределах 100 наносекунд. Эта проба, "
"взятая в системе Intel i7-860 через источник времени TSC, показывает "
"отличную производительность: <screen>\n"
"Testing timing overhead for 3 seconds.\n"
"Per loop time including overhead: 35.96 nsec\n"
"Histogram of timing durations:\n"
"&lt; usec   % of total      count\n"
"     1     96.40465   80435604\n"
"     2      3.59518    2999652\n"
"     4      0.00015        126\n"
"     8      0.00002         13\n"
"    16      0.00000          2\n"
"</screen>"

#: ref/pgtesttiming.xml:111(para)
msgid ""
"Note that different units are used for the per loop time than the histogram. "
"The loop can have resolution within a few nanoseconds (nsec), while the "
"individual timing calls can only resolve down to one microsecond (usec)."
msgstr ""
"Заметьте, что время вызова в цикле и время в гистограмме выражается в разных "
"единицах. Время в цикле может определяться с точностью до наносекунд (nsec), "
"а длительность отдельного вызова замера времени — только с точностью до "
"микросекунд (usec)."

#: ref/pgtesttiming.xml:120(title)
msgid "Measuring executor timing overhead"
msgstr "Измерение издержек исполнителя на замер времени"

#: ref/pgtesttiming.xml:122(para)
msgid ""
"When the query executor is running a statement using <command>EXPLAIN "
"ANALYZE</command>, individual operations are timed as well as showing a "
"summary. The overhead of your system can be checked by counting rows with "
"the <application>psql</application> program: <screen>\n"
"CREATE TABLE t AS SELECT * FROM generate_series(1,100000);\n"
"\\timing\n"
"SELECT COUNT(*) FROM t;\n"
"EXPLAIN ANALYZE SELECT COUNT(*) FROM t;\n"
"</screen>"
msgstr ""
"Когда исполнитель запроса выполняет запрос под контролем <command>EXPLAIN "
"ANALYZE</command>, замеряется не только общее время, но и время отдельных "
"операций. Каковы издержки этих операций в вашей системе, можно узнать, "
"подсчитав строки тестовой таблицы в программе <application>psql</"
"application>: <screen>\n"
"CREATE TABLE t AS SELECT * FROM generate_series(1,100000);\n"
"\\timing\n"
"SELECT COUNT(*) FROM t;\n"
"EXPLAIN ANALYZE SELECT COUNT(*) FROM t;\n"
"</screen>"

#: ref/pgtesttiming.xml:136(para)
msgid ""
"The i7-860 system measured runs the count query in 9.8 ms while the "
"<command>EXPLAIN ANALYZE</command> version takes 16.6 ms, each processing "
"just over 100,000 rows. That 6.8 ms difference means the timing overhead per "
"row is 68 ns, about twice what pg_test_timing estimated it would be. Even "
"that relatively small amount of overhead is making the fully timed count "
"statement take almost 70% longer. On more substantial queries, the timing "
"overhead would be less problematic."
msgstr ""
"В системе i7-860 этот запрос выполняется 9.8 мс, а версия с <command>EXPLAIN "
"ANALYZE</command> — 16.6 мс, при этом обрабатывается около 100&nbsp;000 "
"строк. Это различие в 6.8 мс означает, что издержки замера времени для одной "
"строки составляют около 68 нс, примерно вдвое больше, чем предсказала "
"pg_test_timing. Даже с такими относительно небольшими издержками операция "
"COUNT с полным подсчётом времени выполняется почти на 70% дольше. На более "
"сложных запросах издержки замера времени могут быть не так важны."

#: ref/pgtesttiming.xml:149(title)
msgid "Changing time sources"
msgstr "Смена источника времени"

#: ref/pgtesttiming.xml:150(para)
msgid ""
"On some newer Linux systems, it's possible to change the clock source used "
"to collect timing data at any time. A second example shows the slowdown "
"possible from switching to the slower acpi_pm time source, on the same "
"system used for the fast results above: <screen>\n"
"# cat /sys/devices/system/clocksource/clocksource0/available_clocksource\n"
"tsc hpet acpi_pm\n"
"# echo acpi_pm &gt; /sys/devices/system/clocksource/clocksource0/"
"current_clocksource\n"
"# pg_test_timing\n"
"Per loop time including overhead: 722.92 nsec\n"
"Histogram of timing durations:\n"
"&lt; usec   % of total      count\n"
"     1     27.84870    1155682\n"
"     2     72.05956    2990371\n"
"     4      0.07810       3241\n"
"     8      0.01357        563\n"
"    16      0.00007          3\n"
"</screen>"
msgstr ""
"В некоторых современных системах Linux можно в любой момент сменить источник "
"времени, который используется для замера времени. Второй пример иллюстрирует "
"возможное замедление от переключения на более медленный источник времени "
"acpi_pm time в той же системе, в которой были получены показанные выше "
"хорошие результаты: <screen>\n"
"# cat /sys/devices/system/clocksource/clocksource0/available_clocksource\n"
"tsc hpet acpi_pm\n"
"# echo acpi_pm &gt; /sys/devices/system/clocksource/clocksource0/"
"current_clocksource\n"
"# pg_test_timing\n"
"Per loop time including overhead: 722.92 nsec\n"
"Histogram of timing durations:\n"
"&lt; usec   % of total      count\n"
"     1     27.84870    1155682\n"
"     2     72.05956    2990371\n"
"     4      0.07810       3241\n"
"     8      0.01357        563\n"
"    16      0.00007          3\n"
"</screen>"

#: ref/pgtesttiming.xml:172(para)
msgid ""
"In this configuration, the sample <command>EXPLAIN ANALYZE</command> above "
"takes 115.9 ms. That's 1061 nsec of timing overhead, again a small multiple "
"of what's measured directly by this utility. That much timing overhead means "
"the actual query itself is only taking a tiny fraction of the accounted for "
"time, most of it is being consumed in overhead instead. In this "
"configuration, any <command>EXPLAIN ANALYZE</command> totals involving many "
"timed operations would be inflated significantly by timing overhead."
msgstr ""
"В этой конфигурации тот же <command>EXPLAIN ANALYZE</command> выполняется "
"115.9 мс. Таким образом издержки составили 106.1 мс, что соответствует "
"непосредственному результату этой утилиты с небольшим коэффициентом. Такие "
"большие издержки означают, что сам запрос выполняется лишь небольшой процент "
"всего времени, а основное время уходит на замеры времени. В такой "
"конфигурации временные показатели <command>EXPLAIN ANALYZE</command> для "
"запросов со множеством замеряемых операций значительно увеличатся за счёт "
"издержек замера времени."

#: ref/pgtesttiming.xml:182(para)
msgid ""
"FreeBSD also allows changing the time source on the fly, and it logs "
"information about the timer selected during boot: <screen>\n"
"# dmesg | grep \"Timecounter\"\n"
"Timecounter \"ACPI-fast\" frequency 3579545 Hz quality 900\n"
"Timecounter \"i8254\" frequency 1193182 Hz quality 0\n"
"Timecounters tick every 10.000 msec\n"
"Timecounter \"TSC\" frequency 2531787134 Hz quality 800\n"
"# sysctl kern.timecounter.hardware=TSC\n"
"kern.timecounter.hardware: ACPI-fast -&gt; TSC\n"
"</screen>"
msgstr ""
"FreeBSD так же позволяет сменять источник времени &laquo;на лету&raquo; и "
"выводит информацию о выбранном таймере при загрузке: <screen>\n"
"# dmesg | grep \"Timecounter\"\n"
"Timecounter \"ACPI-fast\" frequency 3579545 Hz quality 900\n"
"Timecounter \"i8254\" frequency 1193182 Hz quality 0\n"
"Timecounters tick every 10.000 msec\n"
"Timecounter \"TSC\" frequency 2531787134 Hz quality 800\n"
"# sysctl kern.timecounter.hardware=TSC\n"
"kern.timecounter.hardware: ACPI-fast -&gt; TSC\n"
"</screen>"

#: ref/pgtesttiming.xml:197(para)
msgid ""
"Other systems may only allow setting the time source on boot. On older Linux "
"systems the \"clock\" kernel setting is the only way to make this sort of "
"change. And even on some more recent ones, the only option you'll see for a "
"clock source is \"jiffies\". Jiffies are the older Linux software clock "
"implementation, which can have good resolution when it's backed by fast "
"enough timing hardware, as in this example: <screen>\n"
"$ cat /sys/devices/system/clocksource/clocksource0/available_clocksource\n"
"jiffies\n"
"$ dmesg | grep time.c\n"
"time.c: Using 3.579545 MHz WALL PM GTOD PIT/TSC timer.\n"
"time.c: Detected 2400.153 MHz processor.\n"
"$ pg_test_timing\n"
"Testing timing overhead for 3 seconds.\n"
"Per timing duration including loop overhead: 97.75 ns\n"
"Histogram of timing durations:\n"
"&lt; usec   % of total      count\n"
"     1     90.23734   27694571\n"
"     2      9.75277    2993204\n"
"     4      0.00981       3010\n"
"     8      0.00007         22\n"
"    16      0.00000          1\n"
"    32      0.00000          1\n"
"</screen>"
msgstr ""
"Другие системы могут допускать смену источника времени только при загрузке. "
"В старых системах Linux это можно было сделать только с помощью параметра "
"ядра &laquo;clock&raquo;. И даже в некоторых самых последних системах можно "
"увидеть только один источник времени — jiffies. Это старая программная "
"реализация часов в Linux, которая может давать хорошее разрешение, когда "
"поддерживается достаточно хорошим оборудованием, как в этом примере: "
"<screen>\n"
"$ cat /sys/devices/system/clocksource/clocksource0/available_clocksource\n"
"jiffies\n"
"$ dmesg | grep time.c\n"
"time.c: Using 3.579545 MHz WALL PM GTOD PIT/TSC timer.\n"
"time.c: Detected 2400.153 MHz processor.\n"
"$ pg_test_timing\n"
"Testing timing overhead for 3 seconds.\n"
"Per timing duration including loop overhead: 97.75 ns\n"
"Histogram of timing durations:\n"
"&lt; usec   % of total      count\n"
"     1     90.23734   27694571\n"
"     2      9.75277    2993204\n"
"     4      0.00981       3010\n"
"     8      0.00007         22\n"
"    16      0.00000          1\n"
"    32      0.00000          1\n"
"</screen>"

#: ref/pgtesttiming.xml:227(title)
msgid "Clock hardware and timing accuracy"
msgstr "Аппаратные часы и точность замера времени"

#: ref/pgtesttiming.xml:229(para)
msgid ""
"Collecting accurate timing information is normally done on computers using "
"hardware clocks with various levels of accuracy. With some hardware the "
"operating systems can pass the system clock time almost directly to "
"programs. A system clock can also be derived from a chip that simply "
"provides timing interrupts, periodic ticks at some known time interval. In "
"either case, operating system kernels provide a clock source that hides "
"these details. But the accuracy of that clock source and how quickly it can "
"return results varies based on the underlying hardware."
msgstr ""
"Измерение времени обычно осуществляется на компьютерах по аппаратным часам, "
"точность которых может быть разного уровня. С некоторым оборудованием "
"операционные системы могут передавать время системных часов непосредственно "
"программам. Также системное время может поступать с чипа, который просто "
"генерирует прерывания по времени, с заведомо известным периодом. В любом "
"случае ядра операционных систем предоставляют источник времени, который "
"скрывает эти детали. Но точность этого источника и возможная скорость "
"получения результатов от него зависит от нижележащего оборудования."

#: ref/pgtesttiming.xml:240(para)
msgid ""
"Inaccurate time keeping can result in system instability. Test any change to "
"the clock source very carefully. Operating system defaults are sometimes "
"made to favor reliability over best accuracy. And if you are using a virtual "
"machine, look into the recommended time sources compatible with it. Virtual "
"hardware faces additional difficulties when emulating timers, and there are "
"often per operating system settings suggested by vendors."
msgstr ""
"Неточность в замерах времени может приводить к нестабильности системы. "
"Поэтому стоит очень тщательно протестировать выбранный источник времени. "
"Иногда по умолчанию в ОС выбирается источник не более точный, а более "
"надёжный. И если вы используете виртуальную машину, поинтересуйтесь, какие "
"источники времени рекомендуется использовать с ней. Имитация таймеров на "
"виртуальном оборудовании связана с дополнительными сложностями, и "
"производители средств виртуализации часто рекомендуют определённые параметры "
"для операционных систем."

#: ref/pgtesttiming.xml:249(para)
msgid ""
"The Time Stamp Counter (TSC) clock source is the most accurate one available "
"on current generation CPUs. It's the preferred way to track the system time "
"when it's supported by the operating system and the TSC clock is reliable. "
"There are several ways that TSC can fail to provide an accurate timing "
"source, making it unreliable. Older systems can have a TSC clock that varies "
"based on the CPU temperature, making it unusable for timing. Trying to use "
"TSC on some older multicore CPUs can give a reported time that's "
"inconsistent among multiple cores. This can result in the time going "
"backwards, a problem this program checks for. And even the newest systems "
"can fail to provide accurate TSC timing with very aggressive power saving "
"configurations."
msgstr ""
"Источник времени TSC (Time Stamp Counter, Счётчик отметки времени) наиболее "
"точный из всех для процессоров текущего поколения. Его рекомендуется "
"использовать для получения системного времени, когда он поддерживается "
"операционной системой и показания TSC надёжны. Возможны ситуации, когда TSC "
"не является точным источником времени, и таким образом, оказывается "
"ненадёжным. Например, в старых системах показания TSC могут зависеть от "
"температуры процессора, что не годится для точного замера времени. При "
"попытке использовать TSC в некоторых старых многоядерных процессорах можно "
"получить разное время на различных ядрах. В результате может оказаться, что "
"время идёт назад (эту аномалию выявляет данная программа). И даже на самых "
"современных системах не всегда можно получить точное время через TSC в "
"режимах очень агрессивного энергосбережения."

#: ref/pgtesttiming.xml:263(para)
msgid ""
"Newer operating systems may check for the known TSC problems and switch to a "
"slower, more stable clock source when they are seen. If your system supports "
"TSC time but doesn't default to that, it may be disabled for a good reason. "
"And some operating systems may not detect all the possible problems "
"correctly, or will allow using TSC even in situations where it's known to be "
"inaccurate."
msgstr ""
"Новые операционные системы могут проверять наличие известных проблем TSC и "
"переключаться на более медленный, но более стабильный источник времени, если "
"они проявляются. Если ваша система поддерживает источник TSC, но не выбирает "
"его по умолчанию, возможно, он отключён обоснованно. С другой стороны, "
"некоторые операционные системы могут не выявлять все возможные проблемы, "
"либо разрешают использовать TSC даже в ситуациях, когда он определённо "
"неточен."

#: ref/pgtesttiming.xml:272(para)
msgid ""
"The High Precision Event Timer (HPET) is the preferred timer on systems "
"where it's available and TSC is not accurate. The timer chip itself is "
"programmable to allow up to 100 nanosecond resolution, but you may not see "
"that much accuracy in your system clock."
msgstr ""
"HPET (High Precision Event Timer, Таймер событий высокой точности) "
"рекомендуется использовать в системах, где он имеется, а TSC неточен. Сам "
"этот чип можно запрограммировать для получения точности до 100 наносекунд, "
"но системное время с такой точностью вы не получите."

#: ref/pgtesttiming.xml:279(para)
msgid ""
"Advanced Configuration and Power Interface (ACPI) provides a Power "
"Management (PM) Timer, which Linux refers to as the acpi_pm. The clock "
"derived from acpi_pm will at best provide 300 nanosecond resolution."
msgstr ""
"ACPI (Advanced Configuration and Power Interface, Расширенный интерфейс "
"конфигурации и питания) обеспечивает таймер PM (Управления питанием), "
"который в Linux называется acpi_pm. Время, поступающее из acpi_pm, в лучшем "
"случае будет иметь разрешение 300 наносекунд."

#: ref/pgtesttiming.xml:285(para)
msgid ""
"Timers used on older PC hardware include the 8254 Programmable Interval "
"Timer (PIT), the real-time clock (RTC), the Advanced Programmable Interrupt "
"Controller (APIC) timer, and the Cyclone timer. These timers aim for "
"millisecond resolution."
msgstr ""
"На старом оборудовании PC применялись таймеры 8254 PIT (Programmable "
"Interval Timer, Программируемый интервальный таймер), RTC (Real-Time Clock, "
"Часы реального времени), таймер APIC (Advanced Programmable Interrupt "
"Controller, Расширенный программируемый контроллер прерываний) и Cyclone. "
"Все эти таймеры обеспечивали точность до миллисекунд."

#: ref/pgtesttiming.xml:295(title)
msgid "See Also"
msgstr "См. также"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: ref/pgtesttiming.xml:0(None)
msgid "translator-credits"
msgstr "translator-credits"
